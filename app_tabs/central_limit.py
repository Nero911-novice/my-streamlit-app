import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from .utils import calculate_sample_means, create_download_button


def central_limit_theorem_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º—ã"""
    if "visited_tabs" not in st.session_state:
        st.session_state.visited_tabs = set()
    st.session_state.visited_tabs.add("–¶–ü–¢")

    st.header("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞")
    st.markdown(
        """–¶–ü–¢ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,
    —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ **—Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π** –±—É–¥–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏."""
    )

    col1, col2, col3 = st.columns(3)
    with col1:
        dist_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
                                 ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"])
    with col2:
        sample_size = st.slider("–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏", 2, 100, 30)
    with col3:
        num_samples = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–∫", 100, 5000, 1000, step=100)

    means = calculate_sample_means(dist_type, sample_size, num_samples)

    fig, ax = plt.subplots(figsize=(12, 6))
    sns.histplot(means, bins=30, kde=True, ax=ax, color="skyblue", edgecolor='black')

    ax.set_title(f"–¶–ü–¢: –°—Ä–µ–¥–Ω–∏–µ {num_samples} –≤—ã–±–æ—Ä–æ–∫ ({dist_type}, n = {sample_size})", fontsize=14)
    ax.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
    ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")

    fig.tight_layout()
    st.pyplot(fig, use_container_width=True)

    create_download_button(fig, "clt.png")

    animate_clt = st.checkbox("–ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏")
    if animate_clt:
        clt_animation_section(dist_type, num_samples)

    st.markdown(
        f"""
    **–ü–æ—è—Å–Ω–µ–Ω–∏–µ**

    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, —á—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–æ—Ä–º—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.

    –ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type.lower()}, —Ä–∞–∑–º–µ—Ä n = {sample_size}, —á–∏—Å–ª–æ –≤—ã–±–æ—Ä–æ–∫ = {num_samples}
    """
    )


def clt_animation_section(dist_type: str, num_samples: int):
    """–†–∞–∑–¥–µ–ª –∞–Ω–∏–º–∞—Ü–∏–∏ –¶–ü–¢"""
    animation_container = st.container()
    chart_placeholder = animation_container.empty()
    info_placeholder = animation_container.empty()

    col1, col2 = st.columns(2)
    with col1:
        animation_speed = st.slider("–°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏", 0.1, 2.0, 0.5, 0.1)
    with col2:
        display_progress = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä", value=True)

    sample_sizes = [2, 5, 10, 20, 30, 50, 100]
    if display_progress:
        progress_bar = st.progress(0)

    for i, n in enumerate(sample_sizes):
        if display_progress:
            progress_bar.progress((i + 1) / len(sample_sizes))

        means = calculate_sample_means(dist_type, n, num_samples)
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.histplot(means, bins=30, kde=True, ax=ax, color="skyblue", edgecolor='black')

        ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö (n = {n})")
        ax.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
        ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")

        std_dev = np.std(means)
        ax.axvline(np.mean(means), color='red', linestyle='--',
                   label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(means):.3f}, œÉ: {std_dev:.3f}')
        ax.legend()

        fig.tight_layout()
        chart_placeholder.pyplot(fig)

        if n <= 10:
            info_placeholder.info(f"n = {n}: –¶–ü–¢ –µ—â—ë —Å–ª–∞–±–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è")
        elif n <= 30:
            info_placeholder.info(f"n = {n}: –¶–ü–¢ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è")
        else:
            info_placeholder.success(f"n = {n}: –¶–ü–¢ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –æ—Ç—á—ë—Ç–ª–∏–≤–æ!")

        plt.close(fig)
        time.sleep(1 / animation_speed)

    if display_progress:
        progress_bar.progress(1.0)

    st.success(
        """üéâ **–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

    –í—ã –Ω–∞–±–ª—é–¥–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –¶–ü–¢:
    1. –° —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º
    2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚àön
    3. –≠—Ñ—Ñ–µ–∫—Ç –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    """
    )
