import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from io import BytesIO
from typing import Tuple, List, Dict, Any

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def generate_distribution_data(dist_type: str, size: int, **params) -> np.ndarray:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    distributions = {
        "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": lambda: np.random.normal(params.get('mu', 0), params.get('sigma', 1), size),
        "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ": lambda: np.random.uniform(params.get('a', 0), params.get('b', 1), size),
        "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ": lambda: np.random.exponential(params.get('scale', 1), size),
        "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ": lambda: generate_bimodal_data(size, params.get('mu1', -2), params.get('mu2', 2),
                                                   params.get('sigma1', 1), params.get('sigma2', 1)),
        "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ": lambda: np.random.binomial(params.get('n', 20), params.get('p', 0.5), size),
        "–ü—É–∞—Å—Å–æ–Ω–∞": lambda: np.random.poisson(params.get('lam', 5), size)
    }
    return distributions.get(dist_type, distributions["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"])()


def generate_bimodal_data(size: int, mu1: float = -2, mu2: float = 2,
                         sigma1: float = 1, sigma2: float = 1) -> np.ndarray:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    half = size // 2
    return np.concatenate([
        np.random.normal(mu1, sigma1, half),
        np.random.normal(mu2, sigma2, size - half)
    ])


@st.cache_data
def calculate_sample_means(dist_type: str, sample_size: int, num_samples: int) -> np.ndarray:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –¥–ª—è –¶–ü–¢"""
    means = []
    for _ in range(num_samples):
        if dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            sample = np.random.uniform(0, 1, sample_size)
        elif dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            sample = np.random.exponential(1.0, sample_size)
        elif dist_type == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
            h = sample_size // 2
            sample = np.concatenate([np.random.normal(-2, 1, h), np.random.normal(2, 1, sample_size-h)])
        else:  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ
            sample = np.random.normal(0, 1, sample_size)
        means.append(np.mean(sample))
    return np.array(means)


@st.cache_data
def safe_statistics(data: np.ndarray) -> Dict[str, float]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return {
            'mean': np.mean(data),
            'median': np.median(data),
            'std': np.std(data),
            'min': np.min(data),
            'max': np.max(data),
            'skewness': stats.skew(data) if len(data) > 2 else np.nan,
            'kurtosis': stats.kurtosis(data) if len(data) > 2 else np.nan
        }
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {str(e)}")
        return {key: np.nan for key in ['mean', 'median', 'std', 'min', 'max', 'skewness', 'kurtosis']}


def create_download_button(fig, filename: str, label: str = "üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    buf = BytesIO()
    fig.savefig(buf, format="png", dpi=300, bbox_inches='tight')
    return st.download_button(label, buf.getvalue(), filename, "image/png")


def format_stat_display(stats_dict: Dict[str, float], title: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫"""
    st.subheader(title)
    for key, value in stats_dict.items():
        if not np.isnan(value):
            st.write(f"{key.capitalize()}: {value:.4f}")
        else:
            st.write(f"{key.capitalize()}: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å")
