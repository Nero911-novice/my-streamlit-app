import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import io
import base64
from matplotlib.backends.backend_pdf import PdfPages

st.set_page_config(page_title="–î–µ–º–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", layout="wide")

# --- –°—Ç–∏–ª–∏ ---
st.markdown("""
<style>
body {
    font-family: 'Segoe UI', sans-serif;
}
h1, h2 {
    color: #4F8BF9;
}
.sidebar .sidebar-content {
    background-color: #f0f2f6;
}
</style>
""", unsafe_allow_html=True)

st.title("üî¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ ---
tabs = st.tabs(["üìä –ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º", "üé≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞", "üìà –ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª"])

# === –í–∫–ª–∞–¥–∫–∞ 1: –ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º ===
with tabs[0]:
    st.header("–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ 68‚Äì95‚Äì99.7%)")
    mu = st.slider("–°—Ä–µ–¥–Ω–µ–µ (Œº)", 20, 80, 50)
    sigma = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (œÉ)", 1, 30, 10)
    sample_size = st.slider("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", 1000, 20000, 10000)

    data = np.random.normal(mu, sigma, sample_size)
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.hist(data, bins=50, density=True, color='lightgray', edgecolor='black')

    colors = ['#a0e8af', '#ffd580', '#f28e8e']
    labels = ['¬±1œÉ (68%)', '¬±2œÉ (95%)', '¬±3œÉ (99.7%)']
    for i in range(3, 0, -1):
        ax.axvspan(mu - i * sigma, mu + i * sigma, color=colors[i - 1], alpha=0.3, label=labels[i - 1])
        ax.axvline(mu - i * sigma, color='red', linestyle='--', linewidth=1)
        ax.axvline(mu + i * sigma, color='red', linestyle='--', linewidth=1)

    ax.set_title(f"–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (Œº = {mu}, œÉ = {sigma})")
    ax.set_xlabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    ax.legend()
    st.pyplot(fig)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    if st.button("üíæ –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PDF)"):
        buf = io.BytesIO()
        with PdfPages(buf) as pdf:
            pdf.savefig(fig)
        b64 = base64.b64encode(buf.getvalue()).decode()
        href = f'<a href="data:application/pdf;base64,{b64}" download="three_sigma.pdf">–°–∫–∞—á–∞—Ç—å PDF</a>'
        st.markdown(href, unsafe_allow_html=True)

# === –í–∫–ª–∞–¥–∫–∞ 2: –¶–ü–¢ ===
with tabs[1]:
    st.header("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞")
    dist_type = st.selectbox("–¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"])
    sample_size = st.slider("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", 2, 100, 30, key='clt_size')
    num_samples = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–∫", 100, 5000, 1000, step=100, key='clt_count')

    def generate_distribution(dist_type, size):
        if dist_type == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
            return np.random.normal(0, 1, size)
        elif dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            return np.random.uniform(-1, 1, size)
        elif dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            return np.random.exponential(scale=1, size=size)
        elif dist_type == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
            d1 = np.random.normal(-2, 0.5, size // 2)
            d2 = np.random.normal(2, 0.5, size // 2)
            return np.concatenate([d1, d2])
        else:
            return np.random.normal(0, 1, size)

    means = [np.mean(generate_distribution(dist_type, sample_size)) for _ in range(num_samples)]
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    ax2.hist(means, bins=30, density=True, alpha=0.6, color='skyblue')
    ax2.set_title(f"–¶–ü–¢: –°—Ä–µ–¥–Ω–∏–µ –∏–∑ {num_samples} –≤—ã–±–æ—Ä–æ–∫ –ø–æ {sample_size} –∏–∑ {dist_type} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    ax2.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
    ax2.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
    st.pyplot(fig2)

# === –í–∫–ª–∞–¥–∫–∞ 3: –ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª ===
with tabs[2]:
    st.header("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    dist = st.selectbox("–¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ"], key="lln_dist")
    trials = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π", 100, 20000, 10000, step=100)

    if dist == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
        data = np.random.normal(0, 1, trials)
        expected = 0
    else:
        data = np.random.uniform(-1, 1, trials)
        expected = 0

    cumulative_avg = np.cumsum(data) / np.arange(1, trials + 1)
    fig3, ax3 = plt.subplots(figsize=(10, 5))
    ax3.plot(cumulative_avg, label="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ")
    ax3.axhline(expected, color='red', linestyle='--', label=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ ({expected})")
    ax3.set_title("–ó–ë–ß: –°—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–∂–∏–¥–∞–Ω–∏—é")
    ax3.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
    ax3.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    ax3.legend()
    st.pyplot(fig3)
