import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π ---
sns.set_theme(style="whitegrid")
st.set_page_config(page_title="–î–µ–º–æ–≤–µ—Ä—Å–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤", layout="wide")

# –°–∞–π–¥–±–∞—Ä: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å
with st.sidebar:
    st.header("üìñ –°–ø—Ä–∞–≤–∫–∞ –∏ —Ñ–æ—Ä–º—É–ª—ã")
    st.markdown("""
    **–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º**  
    [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia](https://en.wikipedia.org/wiki/68‚Äì95‚Äì99.7_rule)
    """, unsafe_allow_html=True)
    st.markdown("""
    **–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞**  
    –ü—Ä–∏ –±–æ–ª—å—à–∏—Ö n —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É (—Å—Ä–µ–¥–Ω–µ–µ Œº, œÉ/‚àön)  
    [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia](https://ru.wikipedia.org/wiki/–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è_–ø—Ä–µ–¥–µ–ª—å–Ω–∞—è_—Ç–µ–æ—Ä–µ–º–∞)
    """, unsafe_allow_html=True)
    st.markdown("""
    **–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª**  
    –°—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥–∏—Ç—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–∂–∏–¥–∞–Ω–∏—é –ø—Ä–∏ n‚Üí‚àû  
    [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia](https://ru.wikipedia.org/wiki/–ó–∞–∫–æ–Ω_–±–æ–ª—å—à–∏—Ö_—á–∏—Å–µ–ª)
    """, unsafe_allow_html=True)
    st.markdown("""
    **–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö —á–∏—Å–µ–ª**  
    –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–æ–±—â–µ–Ω–∏–∏ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫  
    [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia](https://ru.wikipedia.org/wiki/–ó–∞–∫–æ–Ω_–º–∞–ª—ã—Ö_—á–∏—Å–µ–ª_(–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è))
    """, unsafe_allow_html=True)
   
st.title("üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤")
tabs = st.tabs(["–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º", "–¶–ü–¢", "–ó–ë–ß", "–ú–∞–ª—ã–µ –≤—ã–±–æ—Ä–∫–∏"])

# === 1. –ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º ===
with tabs[0]:
    st.header("–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ)")
    mu = st.slider("–°—Ä–µ–¥–Ω–µ–µ (Œº)", 20, 80, 50)
    sigma = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (œÉ)", 1, 30, 10)
    size = st.slider("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", 1000, 50000, 10000, step=1000)

    data = np.random.normal(mu, sigma, size)
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.hist(data, bins=50, density=True, color='lightgray', edgecolor='black')

    # –ó–∞–ª–∏–≤–∫–∏ –∑–æ–Ω ¬±1œÉ, ¬±2œÉ, ¬±3œÉ –∏ –∏—Ö –≥—Ä–∞–Ω–∏—Ü—ã
    colors = ['#b2df8a', '#fdbf6f', '#fb9a99']
    labels = ['¬±1œÉ (68%)', '¬±2œÉ (95%)', '¬±3œÉ (99.7%)']
    for i, color, label in zip([1, 2, 3], colors, labels):
        ax.axvspan(mu - i * sigma, mu + i * sigma, color=color, alpha=0.3, label=label)
        ax.axvline(mu - i * sigma, color='red', linestyle='--', linewidth=1)
        ax.axvline(mu + i * sigma, color='red', linestyle='--', linewidth=1)

    ymax = ax.get_ylim()[1]

    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    ax.annotate(
        "68% –∑–Ω–∞—á–µ–Ω–∏–π\n(¬±1œÉ)", xy=(mu, ymax * 0.9), xycoords='data',
        xytext=(0, -40), textcoords='offset points', ha='center', va='top',
        arrowprops=dict(arrowstyle='->', color='black'), fontsize=9
    )
    ax.annotate(
        "95% –∑–Ω–∞—á–µ–Ω–∏–π\n(¬±2œÉ)", xy=(mu - 2*sigma, ymax * 0.6), xycoords='data',
        xytext=(-40, -10), textcoords='offset points', ha='left', va='top',
        arrowprops=dict(arrowstyle='->', color='black'), fontsize=9
    )
    ax.annotate(
        "–ü–æ—á—Ç–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è\n–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±3œÉ", xy=(mu + 2.5*sigma, ymax * 0.6), xycoords='data',
        xytext=(40, -10), textcoords='offset points', ha='right', va='top',
        arrowprops=dict(arrowstyle='->', color='black'), fontsize=9
    )

    ax.set_title(f"–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (Œº = {mu}, œÉ = {sigma})")
    ax.set_xlabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    ax.legend()

    fig.tight_layout()
    st.pyplot(fig, use_container_width=True)

    # –°–∫–∞—á–∞—Ç—å
    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf.getvalue(), "three_sigma.png", "image/png")

    # –û–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
–ì—Ä–∞—Ñ–∏–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç _–∑–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º_, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ç–æ—Ä–æ–º—É:
- –æ–∫–æ–ª–æ **68%** –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ø–∞–¥–∞—é—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±1œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ,
- –æ–∫–æ–ª–æ **95%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±2œÉ,
- –æ–∫–æ–ª–æ **99.7%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±3œÉ.

–ó–¥–µ—Å—å: Œº = {mu}, œÉ = {sigma}, n = {size}.

---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
- –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é.
- –ù–µ–ø—Ä–∏–º–µ–Ω–∏–º –∫ –º–æ—â–Ω–æ —Å–∫–æ—à–µ–Ω–Ω—ã–º, –º—É–ª—å—Ç–∏–ø–∏–∫–æ–≤—ã–º, –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º.
- –ù–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –≤—ã–±–æ—Ä–∫–∞—Ö –º–æ–∂–µ—Ç –Ω–µ —Å–æ–±–ª—é–¥–∞—Ç—å—Å—è ‚Äî –≤—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –µ—â—ë ¬´–ø—Ä—ã–≥–∞–µ—Ç¬ª.
- –í—ã–±—Ä–æ—Å—ã –∏ —à—É–º –Ω–∞—Ä—É—à–∞—é—Ç –ø—Ä–∞–≤–∏–ª–æ: –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∑–∞ 3 —Å–∏–≥–º—ã –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∏ 5% –Ω–∞–±–ª—é–¥–µ–Ω–∏–π.

üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
- –ü—Ä–æ—Å—Ç–æ–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–±—Ä–æ—Å–∞.
- –û—Å–Ω–æ–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ (Six Sigma).
- –õ–µ–≥–∫–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è.
""")

# === 2. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞ ===
with tabs[1]:
    st.header("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞")
    dist_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"]
    )
    sample_size = st.slider("–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏", 2, 100, 30)
    num_samples = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–∫", 100, 5000, 1000, step=100)

    def generate(dist, n):
        if dist == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ": return np.random.uniform(0, 1, n)
        if dist == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ": return np.random.exponential(1.0, n)
        if dist == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
            h = n // 2
            return np.concatenate([np.random.normal(-2, 1, h), np.random.normal(2, 1, n-h)])
        return np.random.normal(0, 1, n)

    means = [np.mean(generate(dist_type, sample_size)) for _ in range(num_samples)]
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    sns.histplot(means, bins=30, kde=True, ax=ax2, color="skyblue", edgecolor='black')

    ax2.set_title(f"–¶–ü–¢: –°—Ä–µ–¥–Ω–∏–µ {num_samples} –≤—ã–±–æ—Ä–æ–∫ ({dist_type}, n = {sample_size})")
    ax2.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
    ax2.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")

    fig2.tight_layout()
    st.pyplot(fig2, use_container_width=True)

    buf = BytesIO()
    fig2.savefig(buf, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf.getvalue(), "clt.png", "image/png")

    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
_–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞_ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ **—Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π** –±—É–¥–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ n.

–ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type.lower()}, —Ä–∞–∑–º–µ—Ä n = {sample_size}, —á–∏—Å–ª–æ –≤—ã–±–æ—Ä–æ–∫ = {num_samples}.

---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
- –ù—É–∂–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (i.i.d.).
- –î–ª—è –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (—Å —Ç—Ä–µ–Ω–¥–æ–º) –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
- –î–ª—è —Ç—è–∂—ë–ª—ã—Ö —Ö–≤–æ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è n ‚â• 100.
- –ü—Ä–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ö–æ—à–∏) –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º–∞.

üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
- –û—Å–Ω–æ–≤–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
- –û–±–æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –Ω–æ—Ä–º–∞–ª–∏ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏.
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
""")

# === 3. –ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª ===
with tabs[2]:
    st.header("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    dist_type_lln = st.selectbox(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
        ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ"], key="lln"
    )
    trials = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π", 100, 20000, 10000, step=100)

    def sample(dist, n):
        if dist == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ": return np.random.uniform(0, 1, n)
        if dist == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ": return np.random.exponential(1.0, n)
        return np.random.normal(0, 1, n)

    data_lln = sample(dist_type_lln, trials)
    cumulative = np.cumsum(data_lln) / np.arange(1, trials+1)
    expected = np.mean(data_lln)

    fig3, ax3 = plt.subplots(figsize=(10, 5))
    ax3.plot(cumulative, label="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ")
    ax3.axhline(expected, color='r', linestyle='--', label=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ ({expected:.2f})")

    ax3.set_title("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    ax3.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
    ax3.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    ax3.legend()

    fig3.tight_layout()
    st.pyplot(fig3, use_container_width=True)

    buf = BytesIO()
    fig3.savefig(buf, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf.getvalue(), "lln.png", "image/png")

    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
_–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª_ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ n –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º —Å—Ö–æ–¥–∏—Ç—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–∂–∏–¥–∞–Ω–∏—é.

–ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type_lln.lower()}, –∏—Å–ø—ã—Ç–∞–Ω–∏–π = {trials}.

---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
- –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏.
- –°—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏.
- –ù–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö n.
- –û–±–æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
- –®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–∏.
""")

# === 4. –ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫ ===
with tabs[3]:
    st.header("–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫")
    st.markdown("""
–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö —á–∏—Å–µ–ª ‚Äî –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏: –ª—é–¥–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞—é—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤ –ø—Ä–∏ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö.
–ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ n=10 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å —Å–∏–ª—å–Ω–æ –æ—à–∏–±–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
""")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    dist_small = st.selectbox(
        "–ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ","–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ","–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ","–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"]
    )
    n_small = st.slider("–†–∞–∑–º–µ—Ä –º–∞–ª–µ–Ω—å–∫–æ–π –≤—ã–±–æ—Ä–∫–∏ (n)", 2, 30, 5)
    num_sim = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π", 100, 2000, 500, step=100)
    show_mean = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ", value=True)

    # –ö—ç—à–∏—Ä—É–µ–º —Å –ø–æ–º–æ—å—é lru_cache –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç
    samples = np.random.binomial(n_small, 0.5, size=(num_sim, n_small)) / n_small if dist_small == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ" else np.random.binomial(n_small, 0.5, size=(num_sim, n_small)) / n_small
    # –ó–¥–µ—Å—å –¥–ª—è –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä; –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    means_small = samples.mean(axis=1)

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
    fig4, ax4 = plt.subplots(figsize=(10,5))
    ax4.hist(means_small, bins=20, density=True, alpha=0.7, edgecolor='black')
    if show_mean:
        ax4.axvline(np.mean(means_small), color='green', linestyle='--', label='–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ')
    ax4.set_title(f"–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫ (n={n_small}, —Å–∏–º—É–ª—è—Ü–∏–π={num_sim})")
    ax4.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    ax4.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
    if show_mean:
        ax4.legend()
    fig4.tight_layout()
    st.pyplot(fig4, use_container_width=True)

    # –°–∫–∞—á–∞—Ç—å
    buf4 = BytesIO()
    fig4.savefig(buf4, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É (PNG)", buf4.getvalue(), "small_law.png", "image/png")

    # –û–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ç—Ä–∏–∫–∏
    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
–ü—Ä–∏ –º–∞–ª–æ–º n ({n_small}) —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –æ—Å—Ç–∞—ë—Ç—Å—è —à–∏—Ä–æ–∫–∏–º –∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º.

–°—Ä–µ–¥–Ω–µ–µ –ø–æ —Å–∏–º—É–ª—è—Ü–∏—è–º: {means_small.mean():.3f}, œÉ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ: {means_small.std(ddof=1):.3f}.

---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ä–∏—Å–∫–∏**:
- –í—ã—Å–æ–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –æ—Ü–µ–Ω–æ–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ.
- n < 30 ‚Äî –¶–ü–¢ –µ—â—ë –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é.
- –î–ª—è —Ç—è–∂–µ–ª—ã—Ö —Ö–≤–æ—Å—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç—Å—è –±–æ–ª—å—à–∏–µ n.

üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
- –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–º–∞ –≤—ã–±–æ—Ä–∫–∏.
- –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞–ª–æ–π –≤—ã–±–æ—Ä–∫–∏ –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã.
""")
