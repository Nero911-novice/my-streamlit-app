import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–î–µ–º–æ–≤–µ—Ä—Å–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤", layout="wide")
sns.set_theme(style="whitegrid")

st.title("üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤")
tabs = st.tabs(["–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º", "–¶–ü–¢", "–ó–ë–ß"])

# === 1. –ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º ===
with tabs[0]:
    st.header("–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ)")
    mu = st.slider("–°—Ä–µ–¥–Ω–µ–µ (Œº)", 20, 80, 50)
    sigma = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (œÉ)", 1, 30, 10)
    size = st.slider("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", 1000, 50000, 10000, step=1000)

    data = np.random.normal(mu, sigma, size)
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.hist(data, bins=50, density=True, color='lightgray', edgecolor='black')

    # –ó–∞–ª–∏–≤–∫–∏ –∑–æ–Ω ¬±1œÉ, ¬±2œÉ, ¬±3œÉ –∏ –∏—Ö –≥—Ä–∞–Ω–∏—Ü—ã
    colors = ['#b2df8a', '#fdbf6f', '#fb9a99']
    labels = ['¬±1œÉ (68%)', '¬±2œÉ (95%)', '¬±3œÉ (99.7%)']
    for i, color, label in zip([1, 2, 3], colors, labels):
        ax.axvspan(mu - i * sigma, mu + i * sigma, color=color, alpha=0.3, label=label)
        ax.axvline(mu - i * sigma, color='red', linestyle='--', linewidth=1)
        ax.axvline(mu + i * sigma, color='red', linestyle='--', linewidth=1)

    # –ù–∏–∂–Ω—è—è –∏ –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ Y
    ymax = ax.get_ylim()[1]

    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
    ax.annotate(
        "68% –∑–Ω–∞—á–µ–Ω–∏–π\n(¬±1œÉ)", xy=(mu, ymax * 0.9), xycoords='data',
        xytext=(0, -40), textcoords='offset points', ha='center', va='top',
        arrowprops=dict(arrowstyle='->', color='black'), fontsize=9
    )
    ax.annotate(
        "95% –∑–Ω–∞—á–µ–Ω–∏–π\n(¬±2œÉ)", xy=(mu - 2 * sigma, ymax * 0.6), xycoords='data',
        xytext=(-40, -10), textcoords='offset points', ha='left', va='top',
        arrowprops=dict(arrowstyle='->', color='black'), fontsize=9
    )
    ax.annotate(
        "–ü–æ—á—Ç–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è\n–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±3œÉ", xy=(mu + 2.5 * sigma, ymax * 0.6), xycoords='data',
        xytext=(40, -10), textcoords='offset points', ha='right', va='top',
        arrowprops=dict(arrowstyle='->', color='black'), fontsize=9
    )

    ax.set_title(f"–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (Œº = {mu}, œÉ = {sigma})")
    ax.set_xlabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    ax.legend()

    fig.tight_layout()
    st.pyplot(fig, use_container_width=True)

    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    buf1 = BytesIO()
    fig.savefig(buf1, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf1.getvalue(), "three_sigma.png", "image/png")

    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
–ì—Ä–∞—Ñ–∏–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç _–∑–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º_, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ç–æ—Ä–æ–º—É:
- –æ–∫–æ–ª–æ **68%** –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ø–∞–¥–∞—é—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±1œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ,
- –æ–∫–æ–ª–æ **95%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±2œÉ,
- –æ–∫–æ–ª–æ **99.7%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±3œÉ.
""")

# –æ–±—ã—á–Ω—ã–π –∞–±–∑–∞—Ü (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –±–µ–∑ –ª–∏—à–Ω–µ–π –∂–∏—Ä–Ω–æ—Å—Ç–∏)
st.markdown("""
–ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type.lower()}, —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ = {sample_size}, —á–∏—Å–ª–æ –≤—ã–±–æ—Ä–æ–∫ = {num_samples}.")
""")

st.markdown("""
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
- –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é.
- –ù–µ–ø—Ä–∏–º–µ–Ω–∏–º –∫ –º–æ—â–Ω–æ —Å–∫–æ—à–µ–Ω–Ω—ã–º, –º—É–ª—å—Ç–∏–ø–∏–∫–æ–≤—ã–º, –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º.
- –ù–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –≤—ã–±–æ—Ä–∫–∞—Ö –º–æ–∂–µ—Ç –Ω–µ —Å–æ–±–ª—é–¥–∞—Ç—å—Å—è ‚Äî –≤—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –µ—â—ë ¬´–ø—Ä—ã–≥–∞–µ—Ç¬ª.
- –í—ã–±—Ä–æ—Å—ã –∏ —à—É–º –Ω–∞—Ä—É—à–∞—é—Ç –ø—Ä–∞–≤–∏–ª–æ: –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∑–∞ 3 —Å–∏–≥–º—ã –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∏ 5% –Ω–∞–±–ª—é–¥–µ–Ω–∏–π.
""")

# === 2. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞ ===
with tabs[1]:
    st.header("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞")
    dist_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"]
    )
    sample_size = st.slider("–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏", 2, 100, 30)
    num_samples = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–∫", 100, 5000, 1000, step=100)

    def generate(dist, n):
        if dist == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            return np.random.uniform(0, 1, n)
        if dist == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            return np.random.exponential(1.0, n)
        if dist == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
            half = n // 2
            return np.concatenate([
                np.random.normal(-2, 1, half),
                np.random.normal(2, 1, n - half)
            ])
        return np.random.normal(0, 1, n)

    means = [np.mean(generate(dist_type, sample_size)) for _ in range(num_samples)]
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    sns.histplot(means, bins=30, kde=True, ax=ax2, color="skyblue", edgecolor='black')

    ax2.set_title(f"–¶–ü–¢: –°—Ä–µ–¥–Ω–∏–µ {num_samples} –≤—ã–±–æ—Ä–æ–∫ ({dist_type}, —Ä–∞–∑–º–µ—Ä = {sample_size})")
    ax2.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
    ax2.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")

    fig2.tight_layout()
    st.pyplot(fig2, use_container_width=True)

    buf2 = BytesIO()
    fig2.savefig(buf2, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf2.getvalue(), "clt.png", "image/png")

    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
_–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞_ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ **—Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π** –±—É–¥–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏.

–ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type.lower()}, —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ = {sample_size}, —á–∏—Å–ª–æ –≤—ã–±–æ—Ä–æ–∫ = {num_samples}.
---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
- –ù—É–∂–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (i.i.d.).
- –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º. –î–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è 30+, –Ω–æ –¥–ª—è —Ç—è–∂—ë–ª—ã—Ö —Ö–≤–æ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è 100+.
- –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∞–≥—Ä–µ–≥–∞—Ç–∞—Ö –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤).
- –ü—Ä–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ö–æ—à–∏) –¶–ü–¢ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.
""")

# === 3. –ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª ===
with tabs[2]:
    st.header("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    dist_type_lln = st.selectbox(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
        ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ"],
        key="lln"
    )
    trials = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π", 100, 20000, 10000, step=100)

    def sample(dist, n):
        if dist == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            return np.random.uniform(0, 1, n)
        if dist == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            return np.random.exponential(1.0, n)
        return np.random.normal(0, 1, n)

    data_lln = sample(dist_type_lln, trials)
    cumulative = np.cumsum(data_lln) / np.arange(1, trials + 1)
    expected = np.mean(data_lln)

    fig3, ax3 = plt.subplots(figsize=(10, 5))
    ax3.plot(cumulative, label="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ")
    ax3.axhline(expected, color='r', linestyle='--', label=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ ({expected:.2f})")

    ax3.set_title("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    ax3.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
    ax3.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    ax3.legend()

    fig3.tight_layout()
    st.pyplot(fig3, use_container_width=True)

    buf3 = BytesIO()
    fig3.savefig(buf3, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf3.getvalue(), "lln.png", "image/png")

    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
_–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª_ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø–æ –º–µ—Ä–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ö–æ–¥–∏—Ç—å—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–∂–∏–¥–∞–Ω–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ **{trials}** –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∏–∑ **{dist_type_lln.lower()} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è**.
---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
- –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏.
- –°—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏.
- –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∫–æ —É–¥–∞—ë—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.
- –ó–ë–ß –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –º–æ–∂–Ω–æ –Ω–µ –¥–æ–∂–¥–∞—Ç—å—Å—è –µ—ë –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ.
""")
