import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats  # –í–∞–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å stats –∏–º–µ–Ω–Ω–æ —Ç–∞–∫
from io import BytesIO
import time  # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É

@st.cache_data
def generate_data(dist_type, size, mu=0, sigma=1):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if dist_type == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
        return np.random.normal(mu, sigma, size)
    elif dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
        return np.random.uniform(0, 1, size)
    elif dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
        return np.random.exponential(1.0, size)
    elif dist_type == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
        h = size // 2
        return np.concatenate([np.random.normal(-2, 1, h), np.random.normal(2, 1, size-h)])
    elif dist_type == "–•–∏-–∫–≤–∞–¥—Ä–∞—Ç":
        df = 4  # –°—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã
        return np.random.chisquare(df, size)
    elif dist_type == "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ":
        return np.random.binomial(20, 0.5, size)
    elif dist_type == "–ü—É–∞—Å—Å–æ–Ω–∞":
        return np.random.poisson(5, size)
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return np.random.normal(mu, sigma, size)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
@st.cache_data
def generate_with_params(_dist_type, size, **params):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if _dist_type == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
        return np.random.normal(params.get('mean', 0), params.get('sd', 1), size)
    elif _dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
        return np.random.uniform(params.get('a', 0), params.get('b', 1), size)
    elif _dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
        return np.random.exponential(1/params.get('lambda', 1), size)
    elif _dist_type == "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ":
        return np.random.binomial(params.get('n', 20), params.get('p', 0.5), size)
    elif _dist_type == "–ü—É–∞—Å—Å–æ–Ω–∞":
        return np.random.poisson(params.get('mu', 5), size)
    elif _dist_type == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
        h = size // 2
        return np.concatenate([
            np.random.normal(params.get('mean1', -2), params.get('sd1', 1), h),
            np.random.normal(params.get('mean2', 2), params.get('sd2', 1), size-h)
        ])
    else:
        return np.random.normal(0, 1, size)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫
@st.cache_data
def generate_small_samples(dist_type, n_small, num_sim):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞–ª—ã–µ –≤—ã–±–æ—Ä–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    samples = np.zeros((num_sim, n_small))
    for i in range(num_sim):
        if dist_type == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
            samples[i] = np.random.normal(0, 1, n_small)
        elif dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            samples[i] = np.random.uniform(0, 1, n_small)
        elif dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            samples[i] = np.random.exponential(1.0, n_small)
        elif dist_type == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
            h = n_small // 2
            samples[i] = np.concatenate([np.random.normal(-2, 1, h), np.random.normal(2, 1, n_small-h)])
    return samples

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
def safe_stats(data, func_name):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if func_name == "mean":
            return np.mean(data)
        elif func_name == "median":
            return np.median(data)
        elif func_name == "std":
            return np.std(data)
        elif func_name == "min":
            return np.min(data)
        elif func_name == "max":
            return np.max(data)
        elif func_name == "skew":
            return stats.skew(data)
        elif func_name == "kurtosis":
            return stats.kurtosis(data)
        else:
            return None
    except Exception as e:
        if "debug_mode" in st.session_state and st.session_state.debug_mode:
            st.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ {func_name}: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
def format_stat(data, func_name, label, precision=4):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    value = safe_stats(data, func_name)
    if value is not None:
        return f"{label}: {value:.{precision}f}"
    else:
        return f"{label}: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å"

# –ö—ç—à–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –¥–ª—è –∑–∞–∫–æ–Ω–∞ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
@st.cache_data
def calculate_cumulative_mean(data):
    """–ö—ç—à–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö"""
    return np.cumsum(data) / np.arange(1, len(data)+1)
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π ---
sns.set_theme(style="whitegrid")
st.set_page_config(page_title="–î–µ–º–æ–≤–µ—Ä—Å–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤", layout="wide")

# –°–∞–π–¥–±–∞—Ä: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å
with st.sidebar:
    st.header("üìñ –°–ø—Ä–∞–≤–∫–∞ –∏ —Ñ–æ—Ä–º—É–ª—ã")
    st.markdown("""
    **–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º**  
    [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia](https://en.wikipedia.org/wiki/68‚Äì95‚Äì99.7_rule)
    """, unsafe_allow_html=True)
    st.markdown("""
    **–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞**  
    –ü—Ä–∏ –±–æ–ª—å—à–∏—Ö n —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É (—Å—Ä–µ–¥–Ω–µ–µ Œº, œÉ/‚àön)  
    [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia](https://ru.wikipedia.org/wiki/–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è_–ø—Ä–µ–¥–µ–ª—å–Ω–∞—è_—Ç–µ–æ—Ä–µ–º–∞)
    """, unsafe_allow_html=True)
    st.markdown("""
    **–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª**  
    –°—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥–∏—Ç—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–∂–∏–¥–∞–Ω–∏—é –ø—Ä–∏ n‚Üí‚àû  
    [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia](https://ru.wikipedia.org/wiki/–ó–∞–∫–æ–Ω_–±–æ–ª—å—à–∏—Ö_—á–∏—Å–µ–ª)
    """, unsafe_allow_html=True)
    st.markdown("""
    **–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö —á–∏—Å–µ–ª**  
    –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–æ–±—â–µ–Ω–∏–∏ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫  
    [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia](https://ru.wikipedia.org/wiki/–ó–∞–∫–æ–Ω_–º–∞–ª—ã—Ö_—á–∏—Å–µ–ª_(–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è))
    """, unsafe_allow_html=True)
    st.markdown("""
    **–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É**  
    –û—à–∏–±–∫–∏ –∏–∑-–∑–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤
    [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia](https://ru.wikipedia.org/wiki/–†–µ–≥—Ä–µ—Å—Å–∏—è_–∫_—Å—Ä–µ–¥–Ω–µ–º—É)
    """, unsafe_allow_html=True)

   
st.title("üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤")
tabs = st.tabs(["–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º", "–¶–ü–¢", "–ó–ë–ß", "–ú–∞–ª—ã–µ –≤—ã–±–æ—Ä–∫–∏","–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π","–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É","–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è"])

# === 1. –ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º ===
with tabs[0]:
    st.header("–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ)")
    mu = st.slider("–°—Ä–µ–¥–Ω–µ–µ (Œº)", 20, 80, 50)
    sigma = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (œÉ)", 1, 30, 10)
    size = st.slider("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", 1000, 50000, 10000, step=1000)

    data = generate_data("–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", size, mu, sigma)
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.hist(data, bins=50, density=True, color='lightgray', edgecolor='black')

    # –ó–∞–ª–∏–≤–∫–∏ –∑–æ–Ω ¬±1œÉ, ¬±2œÉ, ¬±3œÉ –∏ –∏—Ö –≥—Ä–∞–Ω–∏—Ü—ã
    colors = ['#b2df8a', '#fdbf6f', '#fb9a99']
    labels = ['¬±1œÉ (68%)', '¬±2œÉ (95%)', '¬±3œÉ (99.7%)']
    for i, color, label in zip([1, 2, 3], colors, labels):
        ax.axvspan(mu - i * sigma, mu + i * sigma, color=color, alpha=0.3, label=label)
        ax.axvline(mu - i * sigma, color='red', linestyle='--', linewidth=1)
        ax.axvline(mu + i * sigma, color='red', linestyle='--', linewidth=1)

    ymax = ax.get_ylim()[1]

    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    ax.annotate(
        "68% –∑–Ω–∞—á–µ–Ω–∏–π\n(¬±1œÉ)", xy=(mu, ymax * 0.9), xycoords='data',
        xytext=(0, -40), textcoords='offset points', ha='center', va='top',
        arrowprops=dict(arrowstyle='->', color='black'), fontsize=9
    )
    ax.annotate(
        "95% –∑–Ω–∞—á–µ–Ω–∏–π\n(¬±2œÉ)", xy=(mu - 2*sigma, ymax * 0.6), xycoords='data',
        xytext=(-40, -10), textcoords='offset points', ha='left', va='top',
        arrowprops=dict(arrowstyle='->', color='black'), fontsize=9
    )
    ax.annotate(
        "–ü–æ—á—Ç–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è\n–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±3œÉ", xy=(mu + 2.5*sigma, ymax * 0.6), xycoords='data',
        xytext=(40, -10), textcoords='offset points', ha='right', va='top',
        arrowprops=dict(arrowstyle='->', color='black'), fontsize=9
    )

    ax.set_title(f"–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (Œº = {mu}, œÉ = {sigma})")
    ax.set_xlabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    ax.legend()

    fig.tight_layout()
    st.pyplot(fig, use_container_width=True)

    # –°–∫–∞—á–∞—Ç—å
    buf = BytesIO()
    fig.savefig(buf, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf.getvalue(), "three_sigma.png", "image/png")

    # –û–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
–ì—Ä–∞—Ñ–∏–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç _–∑–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º_, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ç–æ—Ä–æ–º—É:
- –æ–∫–æ–ª–æ **68%** –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ø–∞–¥–∞—é—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±1œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ,
- –æ–∫–æ–ª–æ **95%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±2œÉ,
- –æ–∫–æ–ª–æ **99.7%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±3œÉ.

–ó–¥–µ—Å—å: Œº = {mu}, œÉ = {sigma}, n = {size}.

---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
- –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é.
- –ù–µ–ø—Ä–∏–º–µ–Ω–∏–º –∫ –º–æ—â–Ω–æ —Å–∫–æ—à–µ–Ω–Ω—ã–º, –º—É–ª—å—Ç–∏–ø–∏–∫–æ–≤—ã–º, –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º.
- –ù–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –≤—ã–±–æ—Ä–∫–∞—Ö –º–æ–∂–µ—Ç –Ω–µ —Å–æ–±–ª—é–¥–∞—Ç—å—Å—è ‚Äî –≤—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –µ—â—ë ¬´–ø—Ä—ã–≥–∞–µ—Ç¬ª.
- –í—ã–±—Ä–æ—Å—ã –∏ —à—É–º –Ω–∞—Ä—É—à–∞—é—Ç –ø—Ä–∞–≤–∏–ª–æ: –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∑–∞ 3 —Å–∏–≥–º—ã –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∏ 5% –Ω–∞–±–ª—é–¥–µ–Ω–∏–π.

üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
- –ü—Ä–æ—Å—Ç–æ–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–±—Ä–æ—Å–∞.
- –û—Å–Ω–æ–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ (Six Sigma).
- –õ–µ–≥–∫–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è.
""")

# === 2. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞ ===
with tabs[1]:
    st.header("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞")
    dist_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"]
    )
    sample_size = st.slider("–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏", 2, 100, 30)
    num_samples = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–∫", 100, 5000, 1000, step=100)

    def generate(dist, n):
        if dist == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ": return np.random.uniform(0, 1, n)
        if dist == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ": return np.random.exponential(1.0, n)
        if dist == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
            h = n // 2
            return np.concatenate([np.random.normal(-2, 1, h), np.random.normal(2, 1, n-h)])
        return np.random.normal(0, 1, n)

    @st.cache_data
    def generate_clt_means(dist_type, sample_size, num_samples):
       """–ö—ç—à–∏—Ä—É–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –¥–ª—è –¶–ü–¢"""
       return [np.mean(generate_data(dist_type, sample_size)) for _ in range(num_samples)]

    means = generate_clt_means(dist_type, sample_size, num_samples)
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    sns.histplot(means, bins=30, kde=True, ax=ax2, color="skyblue", edgecolor='black')

    ax2.set_title(f"–¶–ü–¢: –°—Ä–µ–¥–Ω–∏–µ {num_samples} –≤—ã–±–æ—Ä–æ–∫ ({dist_type}, n = {sample_size})")
    ax2.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
    ax2.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")

    fig2.tight_layout()
    st.pyplot(fig2, use_container_width=True)

    buf = BytesIO()
    fig2.savefig(buf, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf.getvalue(), "clt.png", "image/png")

# –ê–Ω–∏–º–∞—Ü–∏—è –¶–ü–¢
    animate_clt = st.checkbox("–ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏")
    
    if animate_clt:
        # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        animation_container = st.container()
        chart_placeholder = animation_container.empty()
        info_placeholder = animation_container.empty()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        animation_speed = st.slider("–°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏", 0.1, 2.0, 0.5, 0.1)
        display_progress = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä", value=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤—ã–±–æ—Ä–æ–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        sample_sizes = [2, 5, 10, 20, 30, 50, 100]
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if display_progress:
            progress_bar = st.progress(0)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        for i, n in enumerate(sample_sizes):
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if display_progress:
                progress_bar.progress((i + 1) / len(sample_sizes))
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏
            @st.cache_data
            def generate_clt_animation_means(dist_type, n, num_samples):
                return [np.mean(generate_data(dist_type, n)) for _ in range(num_samples)]

            means = generate_clt_animation_means(dist_type, n, num_samples)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, ax = plt.subplots(figsize=(10, 5))
            sns.histplot(means, bins=30, kde=True, ax=ax, color="skyblue", edgecolor='black')
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö (n = {n})")
            ax.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
            ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
            fig.tight_layout()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            std_dev = np.std(means)
            ax.axvline(np.mean(means), color='red', linestyle='--', 
                      label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(means):.3f}, œÉ: {std_dev:.3f}')
            ax.legend()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            with chart_placeholder:
                st.pyplot(fig)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
            with info_placeholder:
                st.info(f"–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: {n}. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º, –∞ —Ä–∞–∑–±—Ä–æ—Å —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º n.")
            
            plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            time.sleep(1/animation_speed)
        
        if display_progress:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä –¥–æ –∫–æ–Ω—Ü–∞
            progress_bar.progress(1.0)
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        st.success("""
        üéâ **–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** 
        
        –í—ã –Ω–∞–±–ª—é–¥–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º—ã:
        1. –° —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ (n) —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–ª–∏–∂–µ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É
        2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚àön
        3. –î–∞–∂–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, –¥–∞–ª–µ–∫–∏—Ö –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ, —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        
        –≠—Ç–æ –æ–¥–Ω–∞ –∏–∑ –ø—Ä–∏—á–∏–Ω, –ø–æ—á–µ–º—É –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–∫ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ!
        """)


    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
_–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞_ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ **—Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π** –±—É–¥–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ n.

–ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type.lower()}, —Ä–∞–∑–º–µ—Ä n = {sample_size}, —á–∏—Å–ª–æ –≤—ã–±–æ—Ä–æ–∫ = {num_samples}.

---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
- –ù—É–∂–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (i.i.d.).
- –î–ª—è –Ω–µ—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (—Å —Ç—Ä–µ–Ω–¥–æ–º) –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
- –î–ª—è —Ç—è–∂—ë–ª—ã—Ö —Ö–≤–æ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è n ‚â• 100.
- –ü—Ä–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä. —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ö–æ—à–∏) –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º–∞.

üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
- –û—Å–Ω–æ–≤–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
- –û–±–æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –Ω–æ—Ä–º–∞–ª–∏ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏.
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
""")

# === 3. –ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª ===
with tabs[2]:
    st.header("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    dist_type_lln = st.selectbox(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
        ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ"], key="lln"
    )
    trials = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π", 100, 20000, 10000, step=100)

    def sample(dist, n):
        if dist == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ": return np.random.uniform(0, 1, n)
        if dist == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ": return np.random.exponential(1.0, n)
        return np.random.normal(0, 1, n)

    data_lln = generate_data(dist_type_lln, trials)
   cumulative = calculate_cumulative_mean(data_lln)
    expected = np.mean(data_lln)

    fig3, ax3 = plt.subplots(figsize=(10, 5))
    ax3.plot(cumulative, label="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ")
    ax3.axhline(expected, color='r', linestyle='--', label=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ ({expected:.2f})")

    ax3.set_title("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    ax3.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
    ax3.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    ax3.legend()

    fig3.tight_layout()
    st.pyplot(fig3, use_container_width=True)

    buf = BytesIO()
    fig3.savefig(buf, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf.getvalue(), "lln.png", "image/png")

    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
_–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª_ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ n –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º —Å—Ö–æ–¥–∏—Ç—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–∂–∏–¥–∞–Ω–∏—é.

–ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type_lln.lower()}, –∏—Å–ø—ã—Ç–∞–Ω–∏–π = {trials}.

---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
- –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏.
- –°—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏.
- –ù–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö n.
- –û–±–æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.
- –®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–∏.
""")

# === 4. –ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫ ===
with tabs[3]:
    st.header("–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫")
    st.markdown("""
–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö —á–∏—Å–µ–ª ‚Äî –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏: –ª—é–¥–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞—é—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤ –ø—Ä–∏ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö.
–ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ n=10 –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å —Å–∏–ª—å–Ω–æ –æ—à–∏–±–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
""")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    dist_small = st.selectbox(
        "–ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
        ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ","–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ","–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ","–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"]
    )
    n_small = st.slider("–†–∞–∑–º–µ—Ä –º–∞–ª–µ–Ω—å–∫–æ–π –≤—ã–±–æ—Ä–∫–∏ (n)", 2, 30, 5)
    num_sim = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π", 100, 2000, 500, step=100)
    show_mean = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ", value=True)

    # –ö—ç—à–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é lru_cache –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç
    samples = generate_small_samples(dist_small, n_small, num_sim)
    # –ó–¥–µ—Å—å –¥–ª—è –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä; –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    means_small = samples.mean(axis=1)

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
    fig4, ax4 = plt.subplots(figsize=(10,5))
    ax4.hist(means_small, bins=20, density=True, alpha=0.7, edgecolor='black')
    if show_mean:
        ax4.axvline(np.mean(means_small), color='green', linestyle='--', label='–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ')
    ax4.set_title(f"–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫ (n={n_small}, —Å–∏–º—É–ª—è—Ü–∏–π={num_sim})")
    ax4.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    ax4.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
    if show_mean:
        ax4.legend()
    fig4.tight_layout()
    st.pyplot(fig4, use_container_width=True)

    # –°–∫–∞—á–∞—Ç—å
    buf4 = BytesIO()
    fig4.savefig(buf4, format="png")
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É (PNG)", buf4.getvalue(), "small_law.png", "image/png")

    # –û–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ç—Ä–∏–∫–∏
    st.markdown(f"""
**–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
–ü—Ä–∏ –º–∞–ª–æ–º n ({n_small}) —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –æ—Å—Ç–∞—ë—Ç—Å—è —à–∏—Ä–æ–∫–∏–º –∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º.

–°—Ä–µ–¥–Ω–µ–µ –ø–æ —Å–∏–º—É–ª—è—Ü–∏—è–º: {means_small.mean():.3f}, œÉ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ: {means_small.std(ddof=1):.3f}.

---  
üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ä–∏—Å–∫–∏**:
- –í—ã—Å–æ–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –æ—Ü–µ–Ω–æ–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ.
- n < 30 ‚Äî –¶–ü–¢ –µ—â—ë –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é.
- –î–ª—è —Ç—è–∂–µ–ª—ã—Ö —Ö–≤–æ—Å—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç—Å—è –±–æ–ª—å—à–∏–µ n.

üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
- –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä–µ–º–∞ –≤—ã–±–æ—Ä–∫–∏.
- –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞–ª–æ–π –≤—ã–±–æ—Ä–∫–∏ –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã.
""")

# === 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π ===
with tabs[4]:
    st.header("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
    st.markdown("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
    
    # –í—ã–±–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    with col1:
        dist1 = st.selectbox(
            "–ü–µ—Ä–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
            ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ", "–ü—É–∞—Å—Å–æ–Ω–∞"]
        )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if dist1 == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
            mean1 = st.slider("–°—Ä–µ–¥–Ω–µ–µ Œº (1)", -10.0, 10.0, 0.0)
            sd1 = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ œÉ (1)", 0.1, 5.0, 1.0)
        elif dist1 == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            a1 = st.slider("–ú–∏–Ω–∏–º—É–º a (1)", -10.0, 10.0, 0.0)
            b1 = st.slider("–ú–∞–∫—Å–∏–º—É–º b (1)", a1+0.1, a1+20.0, a1+1.0)
        elif dist1 == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            lambda1 = st.slider("–õ—è–º–±–¥–∞ Œª (1)", 0.1, 5.0, 1.0)
        elif dist1 == "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ":
            n1 = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π n (1)", 1, 100, 20)
            p1 = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ p (1)", 0.0, 1.0, 0.5)
        elif dist1 == "–ü—É–∞—Å—Å–æ–Ω–∞":
            mu1 = st.slider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å Œª (1)", 0.1, 20.0, 5.0)

    with col2:
        dist2 = st.selectbox(
            "–í—Ç–æ—Ä–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
            ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ", "–ü—É–∞—Å—Å–æ–Ω–∞"],
            index=1
        )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if dist2 == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
            mean2 = st.slider("–°—Ä–µ–¥–Ω–µ–µ Œº (2)", -10.0, 10.0, 0.0)
            sd2 = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ œÉ (2)", 0.1, 5.0, 1.0)
        elif dist2 == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            a2 = st.slider("–ú–∏–Ω–∏–º—É–º a (2)", -10.0, 10.0, 0.0)
            b2 = st.slider("–ú–∞–∫—Å–∏–º—É–º b (2)", a2+0.1, a2+20.0, a2+1.0)
        elif dist2 == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            lambda2 = st.slider("–õ—è–º–±–¥–∞ Œª (2)", 0.1, 5.0, 1.0)
        elif dist2 == "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ":
            n2 = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π n (2)", 1, 100, 20)
            p2 = st.slider("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ p (2)", 0.0, 1.0, 0.5)
        elif dist2 == "–ü—É–∞—Å—Å–æ–Ω–∞":
            mu2 = st.slider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å Œª (2)", 0.1, 20.0, 5.0)
    
    # –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
    sample_size = st.slider("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", 1000, 10000, 5000)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    def generate_dist_data(dist_type, sample_size, params):
        if dist_type == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
            return np.random.normal(params.get('mean', 0), params.get('sd', 1), sample_size)
        elif dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            return np.random.uniform(params.get('a', 0), params.get('b', 1), sample_size)
        elif dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            return np.random.exponential(1/params.get('lambda', 1), sample_size)
        elif dist_type == "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ":
            return np.random.binomial(params.get('n', 20), params.get('p', 0.5), sample_size)
        elif dist_type == "–ü—É–∞—Å—Å–æ–Ω–∞":
            return np.random.poisson(params.get('mu', 5), sample_size)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
    params1 = {}
    if dist1 == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
        params1 = {'mean': mean1, 'sd': sd1}
    elif dist1 == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
        params1 = {'a': a1, 'b': b1}
    elif dist1 == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
        params1 = {'lambda': lambda1}
    elif dist1 == "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ":
        params1 = {'n': n1, 'p': p1}
    elif dist1 == "–ü—É–∞—Å—Å–æ–Ω–∞":
        params1 = {'mu': mu1}
    
    params2 = {}
    if dist2 == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
        params2 = {'mean': mean2, 'sd': sd2}
    elif dist2 == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
        params2 = {'a': a2, 'b': b2}
    elif dist2 == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
        params2 = {'lambda': lambda2}
    elif dist2 == "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ":
        params2 = {'n': n2, 'p': p2}
    elif dist2 == "–ü—É–∞—Å—Å–æ–Ω–∞":
        params2 = {'mu': mu2}
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    @st.cache_data
    def generate_comparison_data(dist1, dist2, params1, params2, sample_size):
    """–ö—ç—à–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"""
    data1 = generate_with_params(dist1, sample_size, **params1)
    data2 = generate_with_params(dist2, sample_size, **params2)
    return data1, data2

data1, data2 = generate_comparison_data(dist1, dist2, params1, params2, sample_size)
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots(figsize=(10, 6))
    
    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    sns.histplot(data1, bins=30, alpha=0.5, label=f"{dist1}", color="blue", kde=True, ax=ax)
    sns.histplot(data2, bins=30, alpha=0.5, label=f"{dist2}", color="red", kde=True, ax=ax)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_title(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {dist1} vs {dist2}")
    ax.set_xlabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
    ax.legend()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    st.pyplot(fig, use_container_width=True)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    stats_col1, stats_col2 = st.columns(2)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        with stats_col1:
            st.subheader(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {dist1}")
            st.write(f"–°—Ä–µ–¥–Ω–µ–µ: {np.mean(data1):.4f}")
            st.write(f"–ú–µ–¥–∏–∞–Ω–∞: {np.median(data1):.4f}")
            st.write(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(data1):.4f}")
            st.write(f"–ú–∏–Ω–∏–º—É–º: {np.min(data1):.4f}")
            st.write(f"–ú–∞–∫—Å–∏–º—É–º: {np.max(data1):.4f}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-except –¥–ª—è –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏ –∏ —ç–∫—Å—Ü–µ—Å—Å–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
            try:
                skewness = stats.skew(data1)
                st.write(f"–ê—Å–∏–º–º–µ—Ç—Ä–∏—è: {skewness:.4f}")
            except:
                st.write("–ê—Å–∏–º–º–µ—Ç—Ä–∏—è: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å")
                
            try:
                kurtosis = stats.kurtosis(data1)
                st.write(f"–≠–∫—Å—Ü–µ—Å—Å: {kurtosis:.4f}")
            except:
                st.write("–≠–∫—Å—Ü–µ—Å—Å: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å")
        
        with stats_col2:
            st.subheader(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {dist2}")
            st.write(f"–°—Ä–µ–¥–Ω–µ–µ: {np.mean(data2):.4f}")
            st.write(f"–ú–µ–¥–∏–∞–Ω–∞: {np.median(data2):.4f}")
            st.write(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(data2):.4f}")
            st.write(f"–ú–∏–Ω–∏–º—É–º: {np.min(data2):.4f}")
            st.write(f"–ú–∞–∫—Å–∏–º—É–º: {np.max(data2):.4f}")
            
            try:
                skewness = stats.skew(data2)
                st.write(f"–ê—Å–∏–º–º–µ—Ç—Ä–∏—è: {skewness:.4f}")
            except:
                st.write("–ê—Å–∏–º–º–µ—Ç—Ä–∏—è: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å")
                
            try:
                kurtosis = stats.kurtosis(data2)
                st.write(f"–≠–∫—Å—Ü–µ—Å—Å: {kurtosis:.4f}")
            except:
                st.write("–≠–∫—Å—Ü–µ—Å—Å: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å")
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    buf = BytesIO()
    fig.savefig(buf, format="png", dpi=300)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (PNG)", buf.getvalue(), "comparison.png", "image/png")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
    st.markdown("""
    **–ü–æ—è—Å–Ω–µ–Ω–∏–µ**
    –≠—Ç–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–º–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏ –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.
    
    –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –Ω–∞:
    - –§–æ—Ä–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å, –ø–∏–∫–∏)
    - –•–≤–æ—Å—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (—Ç—è–∂–µ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å —É–±—ã–≤–∞–Ω–∏—è)
    - –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
    - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (—Å—Ä–µ–¥–Ω–µ–µ, –º–µ–¥–∏–∞–Ω–∞, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
    """)

# === 6. –†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É ===
with tabs[5]:
    st.header("–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É")
    st.markdown("""
    **–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É** ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ñ–µ–Ω–æ–º–µ–Ω, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 
    –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –±–ª–∏–∂–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é. –≠—Ç–æ—Ç —Ñ–µ–Ω–æ–º–µ–Ω —á–∞—Å—Ç–æ –æ—à–∏–±–æ—á–Ω–æ 
    –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    col1, col2 = st.columns(2)
    with col1:
        mu_reg = st.slider("–ò—Å—Ç–∏–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ–ø—É–ª—è—Ü–∏–∏", 0, 100, 50)
        sigma_reg = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", 5, 30, 15)
    
    with col2:
        n_subjects = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–±—ä–µ–∫—Ç–æ–≤", 20, 500, 100)
        threshold_percentile = st.slider("–ü–æ—Ä–æ–≥ –æ—Ç–±–æ—Ä–∞ (–ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å)", 70, 95, 80)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
    # –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–æ –¥–æ–±–∞–≤–∏–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞—Ö
    import time
    seed_value = int(time.time()) % 1000  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    np.random.seed(seed_value)
    
    try:
        # –ò—Å—Ç–∏–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—é)
        true_abilities = np.random.normal(mu_reg, sigma_reg/2, n_subjects)
        
        # –ü–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ (—Ç–µ—Å—Ç 1): –∏—Å—Ç–∏–Ω–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å + —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º
        test1_scores = true_abilities + np.random.normal(0, sigma_reg/2, n_subjects)
        
        # –í—Ç–æ—Ä–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ (—Ç–µ—Å—Ç 2): —Ç–∞–∫–∂–µ –∏—Å—Ç–∏–Ω–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å + –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º
        test2_scores = true_abilities + np.random.normal(0, sigma_reg/2, n_subjects)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ä–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ "–ª—É—á—à–∏—Ö" —Å—É–±—ä–µ–∫—Ç–æ–≤
        threshold = np.percentile(test1_scores, threshold_percentile)
        
        # –í—ã–±–∏—Ä–∞–µ–º "–ª—É—á—à–∏—Ö" —Å—É–±—ä–µ–∫—Ç–æ–≤ –ø–æ –ø–µ—Ä–≤–æ–º—É —Ç–µ—Å—Ç—É
        best_subjects_mask = test1_scores >= threshold
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω "–ª—É—á—à–∏–π" —Å—É–±—ä–µ–∫—Ç
        if np.sum(best_subjects_mask) > 0:
            best_subjects_test1 = test1_scores[best_subjects_mask]
            best_subjects_test2 = test2_scores[best_subjects_mask]
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            all_mean_test1 = np.mean(test1_scores)
            all_mean_test2 = np.mean(test2_scores)
            best_mean_test1 = np.mean(best_subjects_test1)
            best_mean_test2 = np.mean(best_subjects_test2)
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(10, 6))
            
            # –†–∞–∑–±—Ä–æ—Å –≤—Å–µ—Ö —Ç–æ—á–µ–∫
            ax.scatter(test1_scores, test2_scores, alpha=0.4, label="–í—Å–µ —Å—É–±—ä–µ–∫—Ç—ã", color="gray")
            
            # –í—ã–¥–µ–ª—è–µ–º –ª—É—á—à–∏—Ö —Å—É–±—ä–µ–∫—Ç–æ–≤
            ax.scatter(best_subjects_test1, best_subjects_test2, alpha=0.6, 
                       label=f"–õ—É—á—à–∏–µ —Å—É–±—ä–µ–∫—Ç—ã (>{threshold_percentile}%)", color="red")
            
            # –õ–∏–Ω–∏—è y=x –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            min_val = min(np.min(test1_scores), np.min(test2_scores))
            max_val = max(np.max(test1_scores), np.max(test2_scores))
            ax.plot([min_val, max_val], [min_val, max_val], 'k--', alpha=0.5, label="–õ–∏–Ω–∏—è y=x")
            
            # –°—Ä–µ–¥–Ω–∏–µ –ª–∏–Ω–∏–∏
            ax.axvline(all_mean_test1, color='blue', linestyle=':', alpha=0.5, 
                      label=f"–°—Ä–µ–¥–Ω–µ–µ –¢–µ—Å—Ç 1 (–≤—Å–µ): {all_mean_test1:.1f}")
            ax.axhline(all_mean_test2, color='green', linestyle=':', alpha=0.5, 
                      label=f"–°—Ä–µ–¥–Ω–µ–µ –¢–µ—Å—Ç 2 (–≤—Å–µ): {all_mean_test2:.1f}")
            
            # –°—Ä–µ–¥–Ω–∏–µ –¥–ª—è –ª—É—á—à–∏—Ö
            ax.axvline(best_mean_test1, color='red', linestyle='--', alpha=0.5, 
                      label=f"–°—Ä–µ–¥–Ω–µ–µ –¢–µ—Å—Ç 1 (–ª—É—á—à–∏–µ): {best_mean_test1:.1f}")
            ax.axhline(best_mean_test2, color='orange', linestyle='--', alpha=0.5, 
                      label=f"–°—Ä–µ–¥–Ω–µ–µ –¢–µ—Å—Ç 2 (–ª—É—á—à–∏–µ): {best_mean_test2:.1f}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.set_title("–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É")
            ax.set_xlabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞")
            ax.set_ylabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞")
            ax.grid(True, alpha=0.3)
            ax.legend(loc='upper left')
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            st.pyplot(fig, use_container_width=True)
            
            # –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ä–µ–¥–Ω–∏—Ö –¥–ª—è –ª—É—á—à–∏—Ö —Å—É–±—ä–µ–∫—Ç–æ–≤
            diff = best_mean_test1 - best_mean_test2
            pct_diff = (diff / best_mean_test1) * 100 if best_mean_test1 != 0 else 0
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            st.markdown(f"""
            ### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            
            **–ù–∞–±–ª—é–¥–µ–Ω–∏—è:**
            - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ (–≤—Å–µ —Å—É–±—ä–µ–∫—Ç—ã): {all_mean_test1:.2f}
            - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ (–≤—Å–µ —Å—É–±—ä–µ–∫—Ç—ã): {all_mean_test2:.2f}
            - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ª—É—á—à–∏–µ —Å—É–±—ä–µ–∫—Ç—ã): {best_mean_test1:.2f}
            - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ª—É—á—à–∏–µ —Å—É–±—ä–µ–∫—Ç—ã): {best_mean_test2:.2f}
            - **–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É**: {diff:.2f} –ø—É–Ω–∫—Ç–æ–≤ ({pct_diff:.1f}%)
            """)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            buf = BytesIO()
            fig.savefig(buf, format="png", dpi=300)
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)", buf.getvalue(), "regression_to_mean.png", "image/png")
        else:
            st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—É–±—ä–µ–∫—Ç–∞, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—é –æ—Ç–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥.")
    
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
    st.markdown("""
    ### –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
    
    üìä **–°—É—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É:**  
    –ï—Å–ª–∏ –º—ã –æ—Ç–±–∏—Ä–∞–µ–º —Å—É–±—ä–µ–∫—Ç–æ–≤ –ø–æ –≤—ã—Å–æ–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–µ—Ä–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –≤–æ –≤—Ç–æ—Ä–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ 
    –æ–Ω–∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–ª–∏–∂–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ–ø—É–ª—è—Ü–∏–∏. –≠—Ç–æ **–Ω–µ** –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ 
    –Ω–∞–≤—ã–∫–∏ —É—Ö—É–¥—à–∏–ª–∏—Å—å, –∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–º.
    
    üîç **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:**
    - –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    - "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –æ–±–ª–æ–∂–∫–∏ Sports Illustrated": —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã —á–∞—Å—Ç–æ —Å–Ω–∏–∂–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –Ω–∞ –æ–±–ª–æ–∂–∫—É
    - "–≠—Ñ—Ñ–µ–∫—Ç –ª–µ—á–µ–Ω–∏—è" –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —Å –∫—Ä–∞–π–Ω–∏–º–∏ —Å–∏–º–ø—Ç–æ–º–∞–º–∏: –ø–∞—Ü–∏–µ–Ω—Ç—ã —á–∞—Å—Ç–æ "—É–ª—É—á—à–∞—é—Ç—Å—è" –±–µ–∑ –ª–µ—á–µ–Ω–∏—è
    - –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤, –Ω–∞—á–∞—Ç—ã—Ö –ø–æ—Å–ª–µ –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"):
        st.markdown("""
        **–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É:**
        
        –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –≤–µ–ª–∏—á–∏–Ω—ã –æ–±—ã—á–Ω–æ –º–µ–Ω—å—à–µ 1 –∏–∑-–∑–∞ —Å–ª—É—á–∞–π–Ω–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏. 
        –ü—Ä–∏ –æ—Ç–±–æ—Ä–µ –ø–æ –∫—Ä–∞–π–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º (–≤—ã—Å–æ–∫–∏–º –∏–ª–∏ –Ω–∏–∑–∫–∏–º) –≤ –ø–µ—Ä–≤–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏, –≤—Ç–æ—Ä–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å 
        –º–µ–Ω—å—à–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏.
        
        –ï—Å–ª–∏ X –∏ Y - –¥–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å—Ä–µ–¥–Ω–∏–º Œº –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º œÉ, –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π œÅ, —Ç–æ:
        
        E[Y|X=x] = Œº + œÅ(x-Œº)
        
        –ì–¥–µ E[Y|X=x] - –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Y –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ X=x. –¢–∞–∫ –∫–∞–∫ |œÅ| < 1 –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å —à—É–º–æ–º,
        —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É x –∏ Œº —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—å œÅ.
        
        –ß–µ–º –±–æ–ª—å—à–µ —Å–ª—É—á–∞–π–Ω–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö (–º–µ–Ω—å—à–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞), —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É.
        """)

with tabs[6]:
    st.header("üìù –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è")
    
    # –í—ã–±–æ—Ä —Ç–µ–º—ã –∫–≤–∏–∑–∞
    quiz_topic = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", 
        ["–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞", "–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª"]
    )
    
    # –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
    questions = {
        "–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º": [
            {
                "question": "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±1œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏?",
                "options": ["50%", "68%", "95%", "99.7%"],
                "correct": 1,
                "explanation": "–ü–æ –∑–∞–∫–æ–Ω—É —Ç—Ä—ë—Ö —Å–∏–≥–º, –æ–∫–æ–ª–æ 68% –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±1œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ."
            },
            # –î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        ],
        # –î—Ä—É–≥–∏–µ —Ç–µ–º—ã
    }
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    if "quiz_score" not in st.session_state:
        st.session_state.quiz_score = 0
        
    for i, q in enumerate(questions[quiz_topic]):
        st.subheader(f"–í–æ–ø—Ä–æ—Å {i+1}")
        st.write(q["question"])
        answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", q["options"], key=f"q_{quiz_topic}_{i}")
        
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", key=f"check_{quiz_topic}_{i}"):
            if q["options"].index(answer) == q["correct"]:
                st.success("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! " + q["explanation"])
                st.session_state.quiz_score += 1
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω–æ. " + q["explanation"])
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
        st.metric("–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", f"{st.session_state.quiz_score}/{len(questions[quiz_topic])}")

       # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
try:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–æ–∫ –≤ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
    plt.close('all')  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
except Exception as e:
    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(e)}")

# –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if "page_views" not in st.session_state:
    st.session_state.page_views = 0
st.session_state.page_views += 1

# –ü–æ–¥–≤–∞–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
st.markdown("---")
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
    st.markdown("""
    - [Khan Academy: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π](https://www.khanacademy.org/math/statistics-probability)
    - [StatQuest with Josh Starmer](https://www.youtube.com/c/joshstarmer)
    - [Seeing Theory](https://seeing-theory.brown.edu/)
    - [–û–Ω–ª–∞–π–Ω-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π](https://stattrek.com/online-calculator)
    """)

with col2:
    st.markdown("### –û –ø—Ä–æ–µ–∫—Ç–µ")
    st.markdown("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π. 
    
    –û–Ω–æ —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –∏ —Å–∏–º—É–ª—è—Ü–∏—è–º–∏.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–æ–Ω—ã.
    """)

with col3:
    st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    st.metric("–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏", st.session_state.page_views)
    
    if st.button("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
        feedback = st.text_area("–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        if feedback:
            st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∫–∞–ª—ã –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
with st.expander("üìÖ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"):
    st.markdown("""
    **v2.0 (–∏—é–Ω—å 2025)**
    - –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, –†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É, –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ, –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    - –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    - –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    
    **v1.1 (–º–∞–π 2025)**
    - –£–ª—É—á—à–µ–Ω—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –º–æ–¥—É–ª–µ –∑–∞–∫–æ–Ω–∞ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫
    
    **v1.0 (–∞–ø—Ä–µ–ª—å 2025)**
    - –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑
    - –ë–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏: –ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º, –¶–ü–¢, –ó–ë–ß, –ú–∞–ª—ã–µ –≤—ã–±–æ—Ä–∫–∏
    """)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –≥–∏–¥–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
with st.sidebar:
    st.markdown("### üî∞ –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö")
    if st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ä–µ–∂–∏–º"):
        st.info("""
        **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:**
        
        1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é —Å–ª–∞–π–¥–µ—Ä–æ–≤ –∏ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
        3. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ –∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        
        –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!
        """)

# –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
with st.sidebar:
    with st.expander("üí° –°–æ–≤–µ—Ç—ã"):
        st.markdown("""
        **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**
        
        * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–º–∏ –∑–∞–∫–æ–Ω–∞–º–∏
        * –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏—Ö –≤–ª–∏—è–Ω–∏—è
        * –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö - –æ–Ω–∏ –æ–±—ä—è—Å–Ω—è—é—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        * –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¶–ü–¢ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ–∫–±–æ–∫—Å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –¶–ü–¢
        * –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è"
        * –ì—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å, –Ω–∞–≤–µ–¥—è –∫—É—Ä—Å–æ—Ä –∏ –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        
        –ü—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
        * –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –≤—ã–±–æ—Ä–æ–∫
        * –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π
        * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
        """)
