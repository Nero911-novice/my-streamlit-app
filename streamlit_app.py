import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="–î–µ–º–æ–≤–µ—Ä—Å–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤", layout="wide")
sns.set_theme(style="whitegrid")

st.title("üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤")
tabs = st.tabs(["–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º", "–¶–ü–¢", "–ó–ë–ß"])

# === –ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º ===
with tabs[0]:
    st.header("–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ)")
    mu = st.slider("–°—Ä–µ–¥–Ω–µ–µ (Œº)", 20, 80, 50)
    sigma = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (œÉ)", 1, 30, 10)
    size = st.slider("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", 1000, 50000, 10000, step=1000)

    data = np.random.normal(mu, sigma, size)
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.hist(data, bins=50, density=True, color='lightgray', edgecolor='black')

    for i, color, label in zip([1, 2, 3],
                               ['#b2df8a', '#fdbf6f', '#fb9a99'],
                               ['¬±1œÉ (68%)', '¬±2œÉ (95%)', '¬±3œÉ (99.7%)']):
        ax.axvspan(mu - i * sigma, mu + i * sigma, color=color, alpha=0.3, label=label)
        ax.axvline(mu - i * sigma, color='red', linestyle='--', linewidth=1)
        ax.axvline(mu + i * sigma, color='red', linestyle='--', linewidth=1)

    ax.set_title(f"–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (Œº = {mu}, œÉ = {sigma})")
    ax.set_xlabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    ax.legend()
    st.pyplot(fig)

    st.markdown(f"""
    **–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
    –ì—Ä–∞—Ñ–∏–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç _–∑–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º_, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ç–æ—Ä–æ–º—É:
    - –æ–∫–æ–ª–æ **68%** –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ø–∞–¥–∞—é—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±1œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ,
    - –æ–∫–æ–ª–æ **95%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±2œÉ,
    - –æ–∫–æ–ª–æ **99.7%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±3œÉ.

    –ó–¥–µ—Å—å Œº = {mu}, œÉ = {sigma}, n = {size}.
    """)

# === –¶–ü–¢ ===
with tabs[1]:
    st.header("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞")
    dist_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"])
    sample_size = st.slider("–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏", 2, 100, 30)
    num_samples = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–∫", 100, 5000, 1000, step=100)

    def generate(dist_type, size):
        if dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            return np.random.uniform(0, 1, size)
        elif dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            return np.random.exponential(1.0, size)
        elif dist_type == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
            half = size // 2
            return np.concatenate([np.random.normal(-2, 1, half), np.random.normal(2, 1, size - half)])
        else:
            return np.random.normal(0, 1, size)

    means = [np.mean(generate(dist_type, sample_size)) for _ in range(num_samples)]

    fig, ax = plt.subplots(figsize=(10, 5))
    sns.histplot(means, bins=30, kde=True, ax=ax, color="skyblue", edgecolor='black')
    ax.set_title(f"–¶–ü–¢: –°—Ä–µ–¥–Ω–∏–µ {num_samples} –≤—ã–±–æ—Ä–æ–∫ ({dist_type}, —Ä–∞–∑–º–µ—Ä = {sample_size})")
    ax.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
    ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
    st.pyplot(fig)

    st.markdown(f"""
    **–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
    _–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞_ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ **—Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π** –±—É–¥–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏.

    –ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type.lower()}, —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ = {sample_size}, —á–∏—Å–ª–æ –≤—ã–±–æ—Ä–æ–∫ = {num_samples}.
    """)

# === –ó–ë–ß ===
with tabs[2]:
    st.header("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    dist_type = st.selectbox("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ"], key="lln")
    trials = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π", 100, 20000, 10000, step=100)

    def sample(dist_type, trials):
        if dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            return np.random.uniform(0, 1, trials)
        elif dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            return np.random.exponential(1.0, trials)
        else:
            return np.random.normal(0, 1, trials)

    data = sample(dist_type, trials)
    cumulative = np.cumsum(data) / np.arange(1, len(data) + 1)
    expected = np.mean(data)

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(cumulative, label="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ")
    ax.axhline(expected, color='r', linestyle='--', label=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ ({expected:.2f})")
    ax.set_title("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    ax.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
    ax.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    ax.legend()
    st.pyplot(fig)

    st.markdown(f"""
    **–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
    _–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª_ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø–æ –º–µ—Ä–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ö–æ–¥–∏—Ç—å—Å—è
    –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–∂–∏–¥–∞–Ω–∏—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ **{trials}** –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∏–∑ **{dist_type.lower()} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è**.
    """)
