import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from io import BytesIO
import time
from functools import lru_cache
from typing import Tuple, List, Dict, Any, Optional

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
sns.set_theme(style="whitegrid")
st.set_page_config(page_title="–î–µ–º–æ–≤–µ—Ä—Å–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤", layout="wide")

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def generate_distribution_data(dist_type: str, size: int, **params) -> np.ndarray:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    distributions = {
        "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": lambda: np.random.normal(params.get('mu', 0), params.get('sigma', 1), size),
        "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ": lambda: np.random.uniform(params.get('a', 0), params.get('b', 1), size),
        "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ": lambda: np.random.exponential(params.get('scale', 1), size),
        "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ": lambda: generate_bimodal_data(size, params.get('mu1', -2), params.get('mu2', 2), 
                                                   params.get('sigma1', 1), params.get('sigma2', 1)),
        "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ": lambda: np.random.binomial(params.get('n', 20), params.get('p', 0.5), size),
        "–ü—É–∞—Å—Å–æ–Ω–∞": lambda: np.random.poisson(params.get('lam', 5), size)
    }
    
    return distributions.get(dist_type, distributions["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ"])()

def generate_bimodal_data(size: int, mu1: float = -2, mu2: float = 2, 
                         sigma1: float = 1, sigma2: float = 1) -> np.ndarray:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    half = size // 2
    return np.concatenate([
        np.random.normal(mu1, sigma1, half), 
        np.random.normal(mu2, sigma2, size - half)
    ])

@st.cache_data
def calculate_sample_means(dist_type: str, sample_size: int, num_samples: int) -> np.ndarray:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –¥–ª—è –¶–ü–¢"""
    means = []
    for _ in range(num_samples):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞
        if dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ": 
            sample = np.random.uniform(0, 1, sample_size)
        elif dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ": 
            sample = np.random.exponential(1.0, sample_size)
        elif dist_type == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
            h = sample_size // 2
            sample = np.concatenate([np.random.normal(-2, 1, h), np.random.normal(2, 1, sample_size-h)])
        else:  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ
            sample = np.random.normal(0, 1, sample_size)
        
        means.append(np.mean(sample))
    return np.array(means)

@st.cache_data
def safe_statistics(data: np.ndarray) -> Dict[str, float]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return {
            'mean': np.mean(data),
            'median': np.median(data),
            'std': np.std(data),
            'min': np.min(data),
            'max': np.max(data),
            'skewness': stats.skew(data) if len(data) > 2 else np.nan,
            'kurtosis': stats.kurtosis(data) if len(data) > 2 else np.nan
        }
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {str(e)}")
        return {key: np.nan for key in ['mean', 'median', 'std', 'min', 'max', 'skewness', 'kurtosis']}

def create_download_button(fig, filename: str, label: str = "üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (PNG)"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    buf = BytesIO()
    fig.savefig(buf, format="png", dpi=300, bbox_inches='tight')
    return st.download_button(label, buf.getvalue(), filename, "image/png")

def format_stat_display(stats_dict: Dict[str, float], title: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫"""
    st.subheader(title)
    for key, value in stats_dict.items():
        if not np.isnan(value):
            if key in ['mean', 'median', 'std', 'min', 'max']:
                st.write(f"{key.capitalize()}: {value:.4f}")
            else:
                st.write(f"{key.capitalize()}: {value:.4f}")
        else:
            st.write(f"{key.capitalize()}: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å")

# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
    setup_sidebar()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    tabs = st.tabs([
        "–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º", "–¶–ü–¢", "–ó–ë–ß", "–ú–∞–ª—ã–µ –≤—ã–±–æ—Ä–∫–∏",
        "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π", "–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É", 
        "–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è", "–¢–∏–ø—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"
    ])
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
    with tabs[0]:
        three_sigma_law_tab()
    with tabs[1]:
        central_limit_theorem_tab()
    with tabs[2]:
        law_of_large_numbers_tab()
    with tabs[3]:
        small_samples_tab()
    with tabs[4]:
        comparison_distributions_tab()
    with tabs[5]:
        regression_to_mean_tab()
    with tabs[6]:
        knowledge_test_tab()
    with tabs[7]:
        distribution_types_tab()
    
    # –ü–æ–¥–≤–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setup_footer()

def setup_sidebar():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π"""
    with st.sidebar:
        st.header("üìñ –°–ø—Ä–∞–≤–∫–∞ –∏ —Ñ–æ—Ä–º—É–ª—ã")
        
        references = {
            "–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º": "https://en.wikipedia.org/wiki/68‚Äì95‚Äì99.7_rule",
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞": "https://ru.wikipedia.org/wiki/–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è_–ø—Ä–µ–¥–µ–ª—å–Ω–∞—è_—Ç–µ–æ—Ä–µ–º–∞",
            "–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª": "https://ru.wikipedia.org/wiki/–ó–∞–∫–æ–Ω_–±–æ–ª—å—à–∏—Ö_—á–∏—Å–µ–ª",
            "–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö —á–∏—Å–µ–ª": "https://ru.wikipedia.org/wiki/–ó–∞–∫–æ–Ω_–º–∞–ª—ã—Ö_—á–∏—Å–µ–ª_(–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è)",
            "–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É": "https://ru.wikipedia.org/wiki/–†–µ–≥—Ä–µ—Å—Å–∏—è_–∫_—Å—Ä–µ–¥–Ω–µ–º—É"
        }
        
        descriptions = {
            "–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º": "68-95-99.7% –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞": "–ü—Ä–∏ –±–æ–ª—å—à–∏—Ö n —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É (—Å—Ä–µ–¥–Ω–µ–µ Œº, œÉ/‚àön)",
            "–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª": "–°—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥–∏—Ç—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–∂–∏–¥–∞–Ω–∏—é –ø—Ä–∏ n‚Üí‚àû",
            "–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö —á–∏—Å–µ–ª": "–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–æ–±—â–µ–Ω–∏–∏ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫",
            "–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É": "–û—à–∏–±–∫–∏ –∏–∑-–∑–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤"
        }
        
        for name, url in references.items():
            st.markdown(f"""
            **{name}**  
            {descriptions[name]}  
            [–°—Ç–∞—Ç—å—è –Ω–∞ Wikipedia]({url})
            """, unsafe_allow_html=True)
        
        # –°–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
        st.markdown("### üî∞ –î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö")
        if st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ä–µ–∂–∏–º"):
            st.info("""
            **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:**
            
            1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–æ–º–æ—â—å—é —Å–ª–∞–π–¥–µ—Ä–æ–≤ –∏ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
            3. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ –∏ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            
            –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!
            """)
        
        # –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        with st.expander("üí° –°–æ–≤–µ—Ç—ã"):
            st.markdown("""
            **–°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**
            
            * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–º–∏ –∑–∞–∫–æ–Ω–∞–º–∏
            * –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏—Ö –≤–ª–∏—è–Ω–∏—è
            * –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö - –æ–Ω–∏ –æ–±—ä—è—Å–Ω—è—é—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
            * –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¶–ü–¢ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ–∫–±–æ–∫—Å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –¶–ü–¢
            * –ì—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å, –Ω–∞–≤–µ–¥—è –∫—É—Ä—Å–æ—Ä –∏ –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            
            –ü—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
            * –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –≤—ã–±–æ—Ä–æ–∫
            * –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π
            * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            """)

def three_sigma_law_tab():
    """–í–∫–ª–∞–¥–∫–∞ –∑–∞–∫–æ–Ω–∞ —Ç—Ä—ë—Ö —Å–∏–≥–º"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
    if "visited_tabs" not in st.session_state:
        st.session_state.visited_tabs = set()
    st.session_state.visited_tabs.add("–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º")
    
    st.header("–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ)")
    st.markdown("""
    –ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–æ–∫—Ä—É–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
    –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –∫–∞–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ —Å—á–∏—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º, –∞ –∫–∞–∫–æ–µ ‚Äî –≤—ã–±—Ä–æ—Å–æ–º.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        mu = st.slider("–°—Ä–µ–¥–Ω–µ–µ (Œº)", 20, 80, 50)
    with col2:
        sigma = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (œÉ)", 1, 30, 10)
    with col3:
        size = st.slider("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", 1000, 50000, 10000, step=1000)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    data = generate_distribution_data("–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", size, mu=mu, sigma=sigma)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.hist(data, bins=50, density=True, color='lightgray', edgecolor='black', alpha=0.7)
    
    # –ó–∞–ª–∏–≤–∫–∏ –∑–æ–Ω ¬±1œÉ, ¬±2œÉ, ¬±3œÉ
    colors = ['#b2df8a', '#fdbf6f', '#fb9a99']
    labels = ['¬±1œÉ (68%)', '¬±2œÉ (95%)', '¬±3œÉ (99.7%)']
    
    for i, (color, label) in enumerate(zip(colors, labels), 1):
        ax.axvspan(mu - i * sigma, mu + i * sigma, color=color, alpha=0.3, label=label)
        ax.axvline(mu - i * sigma, color='red', linestyle='--', linewidth=1)
        ax.axvline(mu + i * sigma, color='red', linestyle='--', linewidth=1)
    
    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    ymax = ax.get_ylim()[1]
    annotations = [
        ("68% –∑–Ω–∞—á–µ–Ω–∏–π\n(¬±1œÉ)", (mu, ymax * 0.9), (0, -40)),
        ("95% –∑–Ω–∞—á–µ–Ω–∏–π\n(¬±2œÉ)", (mu - 2*sigma, ymax * 0.6), (-40, -10)),
        ("–ü–æ—á—Ç–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è\n–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±3œÉ", (mu + 2.5*sigma, ymax * 0.6), (40, -10))
    ]
    
    for text, xy, xytext in annotations:
        ax.annotate(text, xy=xy, xycoords='data', xytext=xytext, 
                   textcoords='offset points', ha='center', va='top',
                   arrowprops=dict(arrowstyle='->', color='black'), fontsize=9)
    
    ax.set_title(f"–ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º (Œº = {mu}, œÉ = {sigma})", fontsize=14)
    ax.set_xlabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
    ax.legend()
    
    fig.tight_layout()
    st.pyplot(fig, use_container_width=True)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    create_download_button(fig, "three_sigma.png")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    st.markdown(f"""
    **–ü–æ—è—Å–Ω–µ–Ω–∏–µ**  
    –ì—Ä–∞—Ñ–∏–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç _–∑–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º_, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ç–æ—Ä–æ–º—É:
    - –æ–∫–æ–ª–æ **68%** –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ø–∞–¥–∞—é—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±1œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
    - –æ–∫–æ–ª–æ **95%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±2œÉ  
    - –æ–∫–æ–ª–æ **99.7%** ‚Äî –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±3œÉ
    
    –ó–¥–µ—Å—å: Œº = {mu}, œÉ = {sigma}, n = {size}
    
    **–ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:**
    –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —à–∫–æ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å, –≥–¥–µ —Å—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç –¥–µ—Ç–µ–π 140 —Å–º, –∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 5 —Å–º:
    - –û–∫–æ–ª–æ 68% –¥–µ—Ç–µ–π –∏–º–µ—é—Ç —Ä–æ—Å—Ç –æ—Ç 135 –¥–æ 145 —Å–º (¬±1œÉ)
    - –ü—Ä–∏–º–µ—Ä–Ω–æ 95% –¥–µ—Ç–µ–π –∏–º–µ—é—Ç —Ä–æ—Å—Ç –æ—Ç 130 –¥–æ 150 —Å–º (¬±2œÉ)
    - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ –¥–µ—Ç–∏ (99.7%) –∏–º–µ—é—Ç —Ä–æ—Å—Ç –æ—Ç 125 –¥–æ 155 —Å–º (¬±3œÉ)
    
    ---
    üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
    - –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
    - –ù–µ–ø—Ä–∏–º–µ–Ω–∏–º –∫ —Å–∏–ª—å–Ω–æ —Å–∫–æ—à–µ–Ω–Ω—ã–º, –º—É–ª—å—Ç–∏–ø–∏–∫–æ–≤—ã–º, –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º
    - –ù–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –≤—ã–±–æ—Ä–∫–∞—Ö –º–æ–∂–µ—Ç –Ω–µ —Å–æ–±–ª—é–¥–∞—Ç—å—Å—è
    
    üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
    - –ü—Ä–æ—Å—Ç–æ–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ —Ä–∞–∑–±—Ä–æ—Å–∞
    - –û—Å–Ω–æ–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ (Six Sigma)
    - –õ–µ–≥–∫–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è
    """)

def central_limit_theorem_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º—ã"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
    if "visited_tabs" not in st.session_state:
        st.session_state.visited_tabs = set()
    st.session_state.visited_tabs.add("–¶–ü–¢")
    
    st.header("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞")
    st.markdown("""
    –¶–ü–¢ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, 
    —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ **—Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π** –±—É–¥–µ—Ç —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        dist_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
                                ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"])
    with col2:
        sample_size = st.slider("–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏", 2, 100, 30)
    with col3:
        num_samples = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–∫", 100, 5000, 1000, step=100)
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö
    means = calculate_sample_means(dist_type, sample_size, num_samples)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.histplot(means, bins=30, kde=True, ax=ax, color="skyblue", edgecolor='black')
    
    ax.set_title(f"–¶–ü–¢: –°—Ä–µ–¥–Ω–∏–µ {num_samples} –≤—ã–±–æ—Ä–æ–∫ ({dist_type}, n = {sample_size})", fontsize=14)
    ax.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
    ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
    
    fig.tight_layout()
    st.pyplot(fig, use_container_width=True)
    
    create_download_button(fig, "clt.png")
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¶–ü–¢
    animate_clt = st.checkbox("–ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏")
    
    if animate_clt:
        clt_animation_section(dist_type, num_samples)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    st.markdown(f"""
    **–ü–æ—è—Å–Ω–µ–Ω–∏–µ**
    
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, —á—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö 
    –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–æ—Ä–º—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.
    
    –ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type.lower()}, —Ä–∞–∑–º–µ—Ä n = {sample_size}, —á–∏—Å–ª–æ –≤—ã–±–æ—Ä–æ–∫ = {num_samples}
    
    **–ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:**
    –ï—Å–ª–∏ –≤—ã –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç–µ –∏–≥—Ä–∞–ª—å–Ω—É—é –∫–æ—Å—Ç—å 30 —Ä–∞–∑ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä—è–µ—Ç–µ 
    —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–Ω–æ–≥–æ —Ä–∞–∑, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –±—É–¥–µ—Ç –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–ª–æ–∫–æ–ª (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ), 
    –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ —Å–∞–º–∞ –∫–æ—Å—Ç—å –¥–∞–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
    
    üí° **–ì–¥–µ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:**
    - –°–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø—Ä–æ—Å—ã
    - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞  
    - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    - –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    ---
    üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
    - –ù—É–∂–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (i.i.d.)
    - –î–ª—è —Ç—è–∂—ë–ª—ã—Ö —Ö–≤–æ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è n ‚â• 100
    - –ü—Ä–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ö–æ—à–∏) –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º–∞
    
    üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
    - –û—Å–Ω–æ–≤–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    - –û–±–æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –Ω–æ—Ä–º–∞–ª–∏ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    """)

def clt_animation_section(dist_type: str, num_samples: int):
    """–†–∞–∑–¥–µ–ª –∞–Ω–∏–º–∞—Ü–∏–∏ –¶–ü–¢"""
    animation_container = st.container()
    chart_placeholder = animation_container.empty()
    info_placeholder = animation_container.empty()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    col1, col2 = st.columns(2)
    with col1:
        animation_speed = st.slider("–°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏", 0.1, 2.0, 0.5, 0.1)
    with col2:
        display_progress = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä", value=True)
    
    sample_sizes = [2, 5, 10, 20, 30, 50, 100]
    
    if display_progress:
        progress_bar = st.progress(0)
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    for i, n in enumerate(sample_sizes):
        if display_progress:
            progress_bar.progress((i + 1) / len(sample_sizes))
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏
        means = calculate_sample_means(dist_type, n, num_samples)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, ax = plt.subplots(figsize=(10, 5))
        sns.histplot(means, bins=30, kde=True, ax=ax, color="skyblue", edgecolor='black')
        
        ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö (n = {n})")
        ax.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏")
        ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        std_dev = np.std(means)
        ax.axvline(np.mean(means), color='red', linestyle='--', 
                  label=f'–°—Ä–µ–¥–Ω–µ–µ: {np.mean(means):.3f}, œÉ: {std_dev:.3f}')
        ax.legend()
        
        fig.tight_layout()
        
        with chart_placeholder:
            st.pyplot(fig)
        
        with info_placeholder:
            if n <= 10:
                st.info(f"n = {n}: –¶–ü–¢ –µ—â—ë —Å–ª–∞–±–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è")
            elif n <= 30:
                st.info(f"n = {n}: –¶–ü–¢ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è")
            else:
                st.success(f"n = {n}: –¶–ü–¢ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –æ—Ç—á—ë—Ç–ª–∏–≤–æ!")
        
        plt.close(fig)
        time.sleep(1/animation_speed)
    
    if display_progress:
        progress_bar.progress(1.0)
    
    st.success("""
    üéâ **–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**
    
    –í—ã –Ω–∞–±–ª—é–¥–∞–ª–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –¶–ü–¢:
    1. –° —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º
    2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚àön
    3. –≠—Ñ—Ñ–µ–∫—Ç –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    """)

def law_of_large_numbers_tab():
    """–í–∫–ª–∞–¥–∫–∞ –∑–∞–∫–æ–Ω–∞ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
    if "visited_tabs" not in st.session_state:
        st.session_state.visited_tabs = set()
    st.session_state.visited_tabs.add("–ó–ë–ß")
    
    st.header("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    col1, col2 = st.columns(2)
    with col1:
        dist_type_lln = st.selectbox("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", 
                                    ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ"], key="lln")
    with col2:
        trials = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π", 100, 20000, 10000, step=100)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    data_lln = generate_distribution_data(dist_type_lln, trials)
    cumulative = np.cumsum(data_lln) / np.arange(1, trials + 1)
    expected = theoretical_mean(dist_type_lln)
    
    # –ì—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(cumulative, label="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ", linewidth=2)
    ax.axhline(expected, color='r', linestyle='--', linewidth=2,
              label=f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ ({expected:.3f})")
    
    ax.set_title("–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª", fontsize=14)
    ax.set_xlabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π")
    ax.set_ylabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    fig.tight_layout()
    st.pyplot(fig, use_container_width=True)
    
    create_download_button(fig, "lln.png")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    st.markdown(f"""
    **–ü–æ—è—Å–Ω–µ–Ω–∏–µ**
    
    –ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ —Å—Ö–æ–¥–∏—Ç—Å—è –∫ –∏—Å—Ç–∏–Ω–Ω–æ–º—É 
    —Å—Ä–µ–¥–Ω–µ–º—É –ø–æ–ø—É–ª—è—Ü–∏–∏ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏.
    
    –ó–¥–µ—Å—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ = {dist_type_lln.lower()}, –∏—Å–ø—ã—Ç–∞–Ω–∏–π = {trials}
    
    **–ü—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:**
    –ü—Ä–∏ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç—ã 10 —Ä–∞–∑ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 7 –æ—Ä–ª–æ–≤ (70%), –Ω–æ –ø—Ä–∏ –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ 
    1000 —Ä–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—á–µ–Ω—å –±–ª–∏–∑–æ–∫ –∫ 50%.
    
    **–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏:**
    - –ö–∞–∑–∏–Ω–æ –≤—Å–µ–≥–¥–∞ –≤ –≤—ã–∏–≥—Ä—ã—à–µ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ
    - –°—Ç—Ä–∞—Ö–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç –ø—Ä–µ–º–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –±–æ–ª—å—à–∏—Ö –≤—ã–±–æ—Ä–∫–∞—Ö
    
    ---
    üî¥ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
    - –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏
    - –°—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ù–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    üîµ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
    - –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–æ–∫ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö n
    - –û–±–æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
    - –®–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–∏
    """)

def theoretical_mean(dist_type: str) -> float:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    means = {
        "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ": 0.0,
        "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ": 0.5,
        "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ": 1.0
    }
    return means.get(dist_type, 0.0)

def small_samples_tab():
    """–í–∫–ª–∞–¥–∫–∞ –∑–∞–∫–æ–Ω–∞ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
    if "visited_tabs" not in st.session_state:
        st.session_state.visited_tabs = set()
    st.session_state.visited_tabs.add("–ú–∞–ª—ã–µ –≤—ã–±–æ—Ä–∫–∏")
    
    st.header("–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫")
    st.markdown("""
    –ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö —á–∏—Å–µ–ª ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–µ–Ω–æ–º–µ–Ω: –ª—é–¥–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞—é—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å 
    –≤—ã–≤–æ–¥–æ–≤ –ø—Ä–∏ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö. –ü—Ä–∏ –º–∞–ª–æ–º n —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å 
    –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å —Å–∏–ª—å–Ω–æ –æ—à–∏–±–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        dist_small = st.selectbox("–ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
                                 ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ"])
    with col2:
        n_small = st.slider("–†–∞–∑–º–µ—Ä –º–∞–ª–µ–Ω—å–∫–æ–π –≤—ã–±–æ—Ä–∫–∏ (n)", 2, 30, 5)
    with col3:
        num_sim = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π", 100, 2000, 500, step=100)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - –ë–ï–ó –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–∫
    means_small = []
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≤—ã–±–æ—Ä–∫—É —Å —Ä–∞–∑–Ω—ã–º seed
    for i in range(num_sim):
        np.random.seed(i + 1000)  # –†–∞–∑–Ω—ã–µ seeds –¥–ª—è –∫–∞–∂–¥–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
        
        if dist_small == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
            sample = np.random.normal(0, 1, n_small)
        elif dist_small == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
            sample = np.random.uniform(0, 1, n_small)
        elif dist_small == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            sample = np.random.exponential(1, n_small)
        elif dist_small == "–ë–∏–º–æ–¥–∞–ª—å–Ω–æ–µ":
            half = n_small // 2
            sample = np.concatenate([
                np.random.normal(-2, 1, half), 
                np.random.normal(2, 1, n_small - half)
            ])
        
        means_small.append(np.mean(sample))
    
    means_small = np.array(means_small)
    
    # –ì—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.hist(means_small, bins=20, density=True, alpha=0.7, edgecolor='black', color='lightcoral')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    emp_mean = np.mean(means_small)
    ax.axvline(emp_mean, color='green', linestyle='--', linewidth=2,
              label=f'–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: {emp_mean:.3f}')
    
    ax.set_title(f"–ó–∞–∫–æ–Ω –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫ (n={n_small}, —Å–∏–º—É–ª—è—Ü–∏–π={num_sim})", fontsize=14)
    ax.set_xlabel("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_ylabel("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å")
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    fig.tight_layout()
    st.pyplot(fig, use_container_width=True)
    
    create_download_button(fig, "small_law.png")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_dict = safe_statistics(means_small)
    
    st.markdown(f"""
    **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞**
    
    –ü—Ä–∏ –º–∞–ª–æ–º —Ä–∞–∑–º–µ—Ä–µ –≤—ã–±–æ—Ä–∫–∏ n = {n_small}:
    - –°—Ä–µ–¥–Ω–µ–µ –ø–æ —Å–∏–º—É–ª—è—Ü–∏—è–º: {stats_dict['mean']:.4f}
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats_dict['std']:.4f}
    - –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: [{stats_dict['min']:.3f}, {stats_dict['max']:.3f}]
    
    **–í—ã–≤–æ–¥:** –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –æ—Å—Ç–∞–µ—Ç—Å—è —à–∏—Ä–æ–∫–∏–º –∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º 
    –ø—Ä–∏ –º–∞–ª—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –≤—ã–±–æ—Ä–∫–∏.
    
    ---
    üî¥ **–†–∏—Å–∫–∏ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫**:
    - –í—ã—Å–æ–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è –æ—Ü–µ–Ω–æ–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ
    - –¶–ü–¢ –µ—â—ë –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏ n < 30
    - –í–æ–∑–º–æ–∂–Ω—ã —Å–µ—Ä—å—ë–∑–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –≤—ã–≤–æ–¥–∞—Ö
    
    üîµ **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª—å–∑–∞**:
    - –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –æ–±—ä—ë–º–∞ –≤—ã–±–æ—Ä–∫–∏
    - –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å –Ω–µ–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫
    - –û–±—ä—è—Å–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    """)

def comparison_distributions_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
    if "visited_tabs" not in st.session_state:
        st.session_state.visited_tabs = set()
    st.session_state.visited_tabs.add("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
    
    st.header("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
    st.markdown("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
    
    # –í—ã–±–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–ü–µ—Ä–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        dist1, params1 = distribution_selector("1")
    
    with col2:
        st.subheader("–í—Ç–æ—Ä–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        dist2, params2 = distribution_selector("2")
    
    # –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
    sample_size = st.slider("–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏", 1000, 10000, 5000)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    data1 = generate_distribution_data(dist1, sample_size, **params1)
    data2 = generate_distribution_data(dist2, sample_size, **params2)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    fig, ax = plt.subplots(figsize=(12, 6))
    
    sns.histplot(data1, bins=30, alpha=0.6, label=f"{dist1}", color="blue", kde=True, ax=ax)
    sns.histplot(data2, bins=30, alpha=0.6, label=f"{dist2}", color="red", kde=True, ax=ax)
    
    ax.set_title(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {dist1} vs {dist2}", fontsize=14)
    ax.set_xlabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    fig.tight_layout()
    st.pyplot(fig, use_container_width=True)
    
    create_download_button(fig, "comparison.png")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    col1, col2 = st.columns(2)
    
    with col1:
        stats1 = safe_statistics(data1)
        format_stat_display(stats1, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {dist1}")
    
    with col2:
        stats2 = safe_statistics(data2)
        format_stat_display(stats2, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {dist2}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
    st.markdown("""
    **–ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è**
    
    –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:
    - **–§–æ—Ä–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è**: —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫–æ–≤, –∞—Å–∏–º–º–µ—Ç—Ä–∏—è
    - **–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è**: —Å—Ä–µ–¥–Ω–µ–µ vs –º–µ–¥–∏–∞–Ω–∞
    - **–†–∞–∑–±—Ä–æ—Å**: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
    - **–•–≤–æ—Å—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è**: —Ç—è–∂–µ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å —É–±—ã–≤–∞–Ω–∏—è
    """)

def distribution_selector(suffix: str) -> Tuple[str, Dict[str, Any]]:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    distributions = ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ", "–ü—É–∞—Å—Å–æ–Ω–∞"]
    
    dist_type = st.selectbox(f"–¢–∏–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ({suffix})", distributions, 
                            key=f"dist_{suffix}")
    
    params = {}
    
    if dist_type == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ":
        params['mu'] = st.slider(f"–°—Ä–µ–¥–Ω–µ–µ Œº ({suffix})", -10.0, 10.0, 0.0, key=f"mu_{suffix}")
        params['sigma'] = st.slider(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ œÉ ({suffix})", 0.1, 5.0, 1.0, key=f"sigma_{suffix}")
    
    elif dist_type == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
        params['a'] = st.slider(f"–ú–∏–Ω–∏–º—É–º a ({suffix})", -10.0, 10.0, 0.0, key=f"a_{suffix}")
        params['b'] = st.slider(f"–ú–∞–∫—Å–∏–º—É–º b ({suffix})", params['a']+0.1, params['a']+20.0, 
                              params['a']+1.0, key=f"b_{suffix}")
    
    elif dist_type == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
        lam = st.slider(f"–õ—è–º–±–¥–∞ Œª ({suffix})", 0.1, 5.0, 1.0, key=f"lambda_{suffix}")
        params['scale'] = 1/lam  # scipy –∏—Å–ø–æ–ª—å–∑—É–µ—Ç scale parameter
    
    elif dist_type == "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ":
        params['n'] = st.slider(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π n ({suffix})", 1, 100, 20, key=f"n_{suffix}")
        params['p'] = st.slider(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ p ({suffix})", 0.0, 1.0, 0.5, key=f"p_{suffix}")
    
    elif dist_type == "–ü—É–∞—Å—Å–æ–Ω–∞":
        params['lam'] = st.slider(f"–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å Œª ({suffix})", 0.1, 20.0, 5.0, key=f"lam_{suffix}")
    
    return dist_type, params

def regression_to_mean_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
    if "visited_tabs" not in st.session_state:
        st.session_state.visited_tabs = set()
    st.session_state.visited_tabs.add("–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É")
    
    st.header("–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É")
    st.markdown("""
    **–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É** ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ñ–µ–Ω–æ–º–µ–Ω, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º 
    –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –±–ª–∏–∂–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ–ø—É–ª—è—Ü–∏–∏.
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    col1, col2 = st.columns(2)
    with col1:
        mu_reg = st.slider("–ò—Å—Ç–∏–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ–ø—É–ª—è—Ü–∏–∏", 0, 100, 50)
        sigma_reg = st.slider("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", 5, 30, 15)
    
    with col2:
        n_subjects = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–±—ä–µ–∫—Ç–æ–≤", 20, 500, 100)
        threshold_percentile = st.slider("–ü–æ—Ä–æ–≥ –æ—Ç–±–æ—Ä–∞ (–ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å)", 70, 95, 80)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    regression_data = generate_regression_data(mu_reg, sigma_reg, n_subjects, threshold_percentile)
    
    if regression_data:
        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        (test1_scores, test2_scores, best_subjects_test1, best_subjects_test2,
         all_mean_test1, all_mean_test2, best_mean_test1, best_mean_test2) = regression_data
        
        # –ì—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # –í—Å–µ —Å—É–±—ä–µ–∫—Ç—ã
        ax.scatter(test1_scores, test2_scores, alpha=0.4, label="–í—Å–µ —Å—É–±—ä–µ–∫—Ç—ã", 
                  color="gray", s=20)
        
        # –õ—É—á—à–∏–µ —Å—É–±—ä–µ–∫—Ç—ã
        ax.scatter(best_subjects_test1, best_subjects_test2, alpha=0.7, 
                  label=f"–õ—É—á—à–∏–µ —Å—É–±—ä–µ–∫—Ç—ã (>{threshold_percentile}%)", color="red", s=30)
        
        # –õ–∏–Ω–∏—è y=x
        min_val = min(np.min(test1_scores), np.min(test2_scores))
        max_val = max(np.max(test1_scores), np.max(test2_scores))
        ax.plot([min_val, max_val], [min_val, max_val], 'k--', alpha=0.5, 
               label="–õ–∏–Ω–∏—è y=x", linewidth=2)
        
        # –°—Ä–µ–¥–Ω–∏–µ –ª–∏–Ω–∏–∏
        ax.axvline(all_mean_test1, color='blue', linestyle=':', alpha=0.7, 
                  label=f"–°—Ä–µ–¥–Ω–µ–µ –¢–µ—Å—Ç 1 (–≤—Å–µ): {all_mean_test1:.1f}")
        ax.axhline(all_mean_test2, color='green', linestyle=':', alpha=0.7, 
                  label=f"–°—Ä–µ–¥–Ω–µ–µ –¢–µ—Å—Ç 2 (–≤—Å–µ): {all_mean_test2:.1f}")
        
        ax.axvline(best_mean_test1, color='red', linestyle='--', alpha=0.7, 
                  label=f"–°—Ä–µ–¥–Ω–µ–µ –¢–µ—Å—Ç 1 (–ª—É—á—à–∏–µ): {best_mean_test1:.1f}")
        ax.axhline(best_mean_test2, color='orange', linestyle='--', alpha=0.7, 
                  label=f"–°—Ä–µ–¥–Ω–µ–µ –¢–µ—Å—Ç 2 (–ª—É—á—à–∏–µ): {best_mean_test2:.1f}")
        
        ax.set_title("–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É", fontsize=14)
        ax.set_xlabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞")
        ax.set_ylabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞")
        ax.grid(True, alpha=0.3)
        ax.legend(loc='upper left', bbox_to_anchor=(1, 1))
        
        fig.tight_layout()
        st.pyplot(fig, use_container_width=True)
        
        create_download_button(fig, "regression_to_mean.png")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        diff = best_mean_test1 - best_mean_test2
        pct_diff = (diff / best_mean_test1) * 100 if best_mean_test1 != 0 else 0
        
        st.markdown(f"""
        ### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        
        **–ù–∞–±–ª—é–¥–µ–Ω–∏—è:**
        - –°—Ä–µ–¥–Ω–µ–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ (–≤—Å–µ): {all_mean_test1:.2f}
        - –°—Ä–µ–¥–Ω–µ–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ (–≤—Å–µ): {all_mean_test2:.2f}
        - –°—Ä–µ–¥–Ω–µ–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ª—É—á—à–∏–µ): {best_mean_test1:.2f}
        - –°—Ä–µ–¥–Ω–µ–µ –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ª—É—á—à–∏–µ): {best_mean_test2:.2f}
        - **–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É**: {diff:.2f} –ø—É–Ω–∫—Ç–æ–≤ ({pct_diff:.1f}%)
        """)
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
    st.markdown("""
    ### –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
    
    üìä **–°—É—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É:**
    –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–µ—Ä–≤–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ —á–∞—Å—Ç–∏—á–Ω–æ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω—ã —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é, 
    –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—Ä–µ–¥–Ω–µ–º –±–ª–∏–∂–µ –∫ –ø–æ–ø—É–ª—è—Ü–∏–æ–Ω–Ω–æ–º—É —Å—Ä–µ–¥–Ω–µ–º—É.
    
    **–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∂–∏–∑–Ω–∏:**
    - –°–ø–æ—Ä—Ç—Å–º–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–∫–æ—Ä–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–∞—â–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–ª–µ–µ —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    - –°—Ç—É–¥–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –æ–±—ã—á–Ω–æ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª–µ–µ –æ–±—ã—á–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    - –ö–æ–º–ø–∞–Ω–∏–∏ –ø–æ—Å–ª–µ —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫ –æ–±—ã—á–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
    
    **–ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞:** –ü—Ä–∏–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –¥–µ–π—Å—Ç–≤–∏—é –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    
    üîç **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:**
    - "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –æ–±–ª–æ–∂–∫–∏ Sports Illustrated"
    - –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ª–µ—á–µ–Ω–∏—è
    - –û—à–∏–±–æ—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤
    """)

@st.cache_data
def generate_regression_data(mu_reg: int, sigma_reg: int, n_subjects: int, 
                           threshold_percentile: int) -> Optional[Tuple]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∫ —Å—Ä–µ–¥–Ω–µ–º—É"""
    try:
        
        # –ò—Å—Ç–∏–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        true_abilities = np.random.normal(mu_reg, sigma_reg/2, n_subjects)
        
        # –î–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —à—É–º–∞
        test1_scores = true_abilities + np.random.normal(0, sigma_reg/2, n_subjects)
        test2_scores = true_abilities + np.random.normal(0, sigma_reg/2, n_subjects)
        
        # –û—Ç–±–æ—Ä –ª—É—á—à–∏—Ö —Å—É–±—ä–µ–∫—Ç–æ–≤
        threshold = np.percentile(test1_scores, threshold_percentile)
        best_subjects_mask = test1_scores >= threshold
        
        if np.sum(best_subjects_mask) == 0:
            return None
        
        best_subjects_test1 = test1_scores[best_subjects_mask]
        best_subjects_test2 = test2_scores[best_subjects_mask]
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö
        all_mean_test1 = np.mean(test1_scores)
        all_mean_test2 = np.mean(test2_scores)
        best_mean_test1 = np.mean(best_subjects_test1)
        best_mean_test2 = np.mean(best_subjects_test2)
        
        return (test1_scores, test2_scores, best_subjects_test1, best_subjects_test2,
                all_mean_test1, all_mean_test2, best_mean_test1, best_mean_test2)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def knowledge_test_tab():
    """–í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
    if "visited_tabs" not in st.session_state:
        st.session_state.visited_tabs = set()
    st.session_state.visited_tabs.add("–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è")
    
    st.header("–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è")
    st.markdown("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
    if 'test_score' not in st.session_state:
        st.session_state.test_score = 0
        st.session_state.test_completed = False
        st.session_state.current_question = 0
    
    questions = [
        {
            "question": "–°–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω—É —Ç—Ä—ë—Ö —Å–∏–≥–º, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±2œÉ?",
            "options": ["68%", "95%", "99.7%", "50%"],
            "correct": 1,
            "explanation": "–°–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω—É —Ç—Ä—ë—Ö —Å–∏–≥–º, 95% –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ø–∞–¥–∞—é—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ¬±2œÉ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ."
        },
        {
            "question": "–ß—Ç–æ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–µ–º–∞?",
            "options": [
                "–í—Å–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏",
                "–°—Ä–µ–¥–Ω–µ–µ –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä–∫–∏ —Ä–∞–≤–Ω–æ —Å—Ä–µ–¥–Ω–µ–º—É –ø–æ–ø—É–ª—è—Ü–∏–∏", 
                "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É",
                "–î–∏—Å–ø–µ—Ä—Å–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∫–∏"
            ],
            "correct": 2,
            "explanation": "–¶–ü–¢ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏."
        },
        {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É?",
            "options": [
                "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞",
                "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –±—ã—Ç—å –±–ª–∏–∂–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏",
                "–°–ø–æ—Å–æ–± –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è",
                "–¢–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
            ],
            "correct": 1,
            "explanation": "–†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É ‚Äî —Ñ–µ–Ω–æ–º–µ–Ω, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ —Å—Ç—Ä–µ–º—è—Ç—Å—è –±–ª–∏–∂–µ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –ø–æ–ø—É–ª—è—Ü–∏–∏."
        },
        {
            "question": "–ó–∞–∫–æ–Ω –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ:",
            "options": [
                "–ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –≤—Å–µ–≥–¥–∞ —Ç–æ—á–Ω–µ–µ –º–∞–ª—ã—Ö",
                "–ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ —Å—Ä–µ–¥–Ω–µ–µ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –∏—Å—Ç–∏–Ω–Ω–æ–º—É —Å—Ä–µ–¥–Ω–µ–º—É –ø–æ–ø—É–ª—è—Ü–∏–∏",
                "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω–∞ 0.5",
                "–ë–æ–ª—å—à–∏–µ –≤—ã–±–æ—Ä–∫–∏ –≤—Å–µ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
            ],
            "correct": 1,
            "explanation": "–ó–ë–ß –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ –≤—ã–±–æ—Ä–æ—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥–∏—Ç—Å—è –∫ –∏—Å—Ç–∏–Ω–Ω–æ–º—É —Å—Ä–µ–¥–Ω–µ–º—É –ø–æ–ø—É–ª—è—Ü–∏–∏."
        },
        {
            "question": "–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –º–∞–ª—ã–º–∏ –≤—ã–±–æ—Ä–∫–∞–º–∏?",
            "options": [
                "–û–Ω–∏ –≤—Å–µ–≥–¥–∞ –¥–∞—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                "–û–Ω–∏ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫—É—é –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏",
                "–û–Ω–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
                "–û–Ω–∏ –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
            ],
            "correct": 1,
            "explanation": "–ú–∞–ª—ã–µ –≤—ã–±–æ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—Ç—Å—è –≤—ã—Å–æ–∫–æ–π –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é –æ—Ü–µ–Ω–æ–∫, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –≤—ã–≤–æ–¥—ã –º–µ–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º–∏."
        }
    ]
    
    if not st.session_state.test_completed:
        current_q = questions[st.session_state.current_question]
        
        st.subheader(f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question + 1} –∏–∑ {len(questions)}")
        st.write(current_q["question"])
        
        answer = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:", current_q["options"], key=f"q_{st.session_state.current_question}")
        
        if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
            selected_idx = current_q["options"].index(answer)
            if selected_idx == current_q["correct"]:
                st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! " + current_q["explanation"])
                st.session_state.test_score += 1
            else:
                st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. " + current_q["explanation"])
            
            st.session_state.current_question += 1
            
            if st.session_state.current_question >= len(questions):
                st.session_state.test_completed = True
                st.rerun()
            else:
                time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
                st.rerun()
    
    else:
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
        score_pct = (st.session_state.test_score / len(questions)) * 100
        
        st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")
        st.write(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: **{st.session_state.test_score} –∏–∑ {len(questions)}** ({score_pct:.0f}%)")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.progress(score_pct / 100)
        
        if score_pct >= 80:
            st.success("üèÜ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Ö–æ—Ä–æ—à–æ —É—Å–≤–æ–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª!")
        elif score_pct >= 60:
            st.info("üëç –•–æ—Ä–æ—à–æ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã.")
        else:
            st.warning("üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –µ—â–µ —Ä–∞–∑.")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ"):
                st.session_state.test_score = 0
                st.session_state.test_completed = False
                st.session_state.current_question = 0
                st.rerun()
        
        with col2:
            if st.button("üìñ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–∑—É—á–µ–Ω–∏—é"):
                st.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞!")

def distribution_types_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"""
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏
    if "visited_tabs" not in st.session_state:
        st.session_state.visited_tabs = set()
    st.session_state.visited_tabs.add("–¢–∏–ø—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
    
    st.header("–¢–∏–ø—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
    st.markdown("""
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, –∏—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π.
    """)
    
    # –í—ã–±–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    chosen_dist = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
        [
            "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ (–ì–∞—É—Å—Å–æ–≤–æ)", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ", "–ü—É–∞—Å—Å–æ–Ω–∞",
            "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ", "–õ–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–•–∏-–∫–≤–∞–¥—Ä–∞—Ç", "–°—Ç—å—é–¥–µ–Ω—Ç–∞ (t)"
        ]
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    col1, col2 = st.columns([3, 2])
    
    with col1:
        fig = create_distribution_plot(chosen_dist)
        st.pyplot(fig, use_container_width=True)
        create_download_button(fig, f"{chosen_dist.lower().replace(' ', '_')}.png")
    
    with col2:
        display_distribution_info(chosen_dist)
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è
    st.markdown("---")
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
    
    comparison_type = st.radio("–¢–∏–ø —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", ["–¢–∞–±–ª–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫", "–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"])
    
    if comparison_type == "–¢–∞–±–ª–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫":
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        comparison_data = {
            "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": ["–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ", "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ", "–ü—É–∞—Å—Å–æ–Ω–∞", "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ"],
            "–¢–∏–ø": ["–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ", "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ", "–î–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ", "–î–∏—Å–∫—Ä–µ—Ç–Ω–æ–µ", "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ"],
            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã": ["Œº, œÉ", "a, b", "n, p", "Œª", "Œª"],
            "–°—Ä–µ–¥–Ω–µ–µ": ["Œº", "(a+b)/2", "n¬∑p", "Œª", "1/Œª"],
            "–î–∏—Å–ø–µ—Ä—Å–∏—è": ["œÉ¬≤", "(b-a)¬≤/12", "n¬∑p¬∑(1-p)", "Œª", "1/Œª¬≤"]
        }
        
        st.table(comparison_data)
    
    else:
        # –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        comparison_mode = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", 
                                     ["–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", "–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"])
        
        fig, ax = plt.subplots(figsize=(12, 6))
        
        if comparison_mode == "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è":
            x = np.linspace(-4, 8, 1000)
            ax.plot(x, stats.norm.pdf(x), label="–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ N(0,1)", linewidth=2)
            ax.plot(x, stats.uniform.pdf(x, 0, 2), label="–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ U(0,2)", linewidth=2)
            ax.plot(x[x>=0], stats.expon.pdf(x[x>=0]), label="–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ Œª=1", linewidth=2)
            ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
            ax.set_xlim(-1, 6)
        
        else:
            x = np.arange(0, 21)
            ax.bar(x-0.2, stats.binom.pmf(x, 20, 0.25), width=0.4, alpha=0.7, 
                  label="–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ B(20,0.25)")
            ax.bar(x+0.2, stats.poisson.pmf(x, 5), width=0.4, alpha=0.7, 
                  label="–ü—É–∞—Å—Å–æ–Ω–∞ Œª=5")
            ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
        
        ax.legend()
        ax.grid(True, alpha=0.3)
        ax.set_xlabel("x")
        ax.set_ylabel("f(x) –∏–ª–∏ P(X=x)")
        
        fig.tight_layout()
        st.pyplot(fig, use_container_width=True)
        create_download_button(fig, f"comparison_{comparison_mode.lower().replace(' ', '_')}.png")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É
    st.markdown("---")
    st.subheader("üéØ –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ?")
    
    with st.expander("–ü–æ—à–∞–≥–æ–≤—ã–π –≥–∏–¥ –ø–æ –≤—ã–±–æ—Ä—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"):
        st.markdown("""
        **–®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö**
        - üî¢ **–î–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ** (—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞): –ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ, –ü—É–∞—Å—Å–æ–Ω–∞, –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ
        - üìà **–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ** (–ª—é–±—ã–µ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞): –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ, –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ, –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ
        
        **–®–∞–≥ 2: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—Ä–æ–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞**
        - ‚è±Ô∏è **–í—Ä–µ–º—è –¥–æ —Å–æ–±—ã—Ç–∏—è** ‚Üí –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ
        - üìä **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥** ‚Üí –ü—É–∞—Å—Å–æ–Ω–∞  
        - üéØ **–ò—Å–ø—ã—Ç–∞–Ω–∏—è —É—Å–ø–µ—Ö/–Ω–µ—É–¥–∞—á–∞** ‚Üí –ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ
        - üîî **–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤–æ–∫—Ä—É–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ** ‚Üí –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ
        - üí∞ **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–∞–≤—ã–º —Ö–≤–æ—Å—Ç–æ–º** ‚Üí –õ–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ
        
        **–®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö**
        - üìä **QQ-–≥—Ä–∞—Ñ–∏–∫–∏** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        - üß™ **–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è** (–ö–æ–ª–º–æ–≥–æ—Ä–æ–≤–∞-–°–º–∏—Ä–Ω–æ–≤–∞, œá¬≤)
        - üëÅÔ∏è **–í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑** –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º
        
        **–®–∞–≥ 4: –£—á—Ç–∏—Ç–µ –¶–ü–¢**
        - üìà **–°—Ä–µ–¥–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –≤—ã–±–æ—Ä–æ–∫** ‚Üí —á–∞—Å—Ç–æ –ø—Ä–∏–±–ª–∏–∂–∞—é—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É
        - üé≤ **–°—É–º–º—ã —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω** ‚Üí —Å—Ç—Ä–µ–º—è—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É
        """)
    
    # –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    st.markdown("---")
    st.subheader("üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**
        - [Seeing Theory](https://seeing-theory.brown.edu/) - –≤–∏–∑—É–∞–ª—å–Ω–∞—è —Ç–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        - [Distribution Calculator](https://stattrek.com/online-calculator) - –æ–Ω–ª–∞–π–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
        - [Wolfram Alpha](https://wolframalpha.com/) - –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        """)
    
    with col2:
        st.markdown("""
        **–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:**
        - [Wikipedia: List of distributions](https://en.wikipedia.org/wiki/List_of_probability_distributions)
        - [Khan Academy: Statistics](https://www.khanacademy.org/math/statistics-probability)
        - [MIT OpenCourseWare](https://ocw.mit.edu/) - –∫—É—Ä—Å—ã –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        """)

def create_distribution_plot(dist_name: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    if dist_name == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ (–ì–∞—É—Å—Å–æ–≤–æ)":
        mu, sigma = 0, 1
        x = np.linspace(-4, 4, 1000)
        y = stats.norm.pdf(x, mu, sigma)
        ax.plot(x, y, linewidth=3, color='blue')
        ax.fill_between(x, y, alpha=0.3)
        ax.axvline(mu, color='red', linestyle='--', linewidth=2, label=f'Œº = {mu}')
        ax.axvline(mu+sigma, color='green', linestyle=':', linewidth=2, label=f'Œº+œÉ = {mu+sigma}')
        ax.axvline(mu-sigma, color='green', linestyle=':', linewidth=2, label=f'Œº-œÉ = {mu-sigma}')
        ax.set_title("–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ N(0,1)", fontsize=14)
    
    elif dist_name == "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ":
        a, b = 0, 2
        x = np.linspace(-0.5, 2.5, 1000)
        y = np.where((x >= a) & (x <= b), 1/(b-a), 0)
        ax.plot(x, y, linewidth=3, color='green')
        ax.fill_between(x, y, alpha=0.3)
        ax.axvline((a+b)/2, color='red', linestyle='--', linewidth=2, label=f'Œº = {(a+b)/2}')
        ax.set_title(f"–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ U({a},{b})", fontsize=14)
    
    elif dist_name == "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ":
        n, p = 20, 0.3
        x = np.arange(0, n+1)
        y = stats.binom.pmf(x, n, p)
        ax.bar(x, y, alpha=0.7, color='orange', edgecolor='black')
        ax.axvline(n*p, color='red', linestyle='--', linewidth=2, label=f'Œº = {n*p:.1f}')
        ax.set_title(f"–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ B({n},{p})", fontsize=14)
    
    elif dist_name == "–ü—É–∞—Å—Å–æ–Ω–∞":
        lam = 5
        x = np.arange(0, 15)
        y = stats.poisson.pmf(x, lam)
        ax.bar(x, y, alpha=0.7, color='purple', edgecolor='black')
        ax.axvline(lam, color='red', linestyle='--', linewidth=2, label=f'Œº = Œª = {lam}')
        ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ü—É–∞—Å—Å–æ–Ω–∞ (Œª = {lam})", fontsize=14)
    
    elif dist_name == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
        lam = 1
        x = np.linspace(0, 5, 1000)
        y = stats.expon.pdf(x, scale=1/lam)
        ax.plot(x, y, linewidth=3, color='red')
        ax.fill_between(x, y, alpha=0.3)
        ax.axvline(1/lam, color='blue', linestyle='--', linewidth=2, label=f'Œº = {1/lam}')
        ax.set_title(f"–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (Œª = {lam})", fontsize=14)
    
    elif dist_name == "–õ–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ":
        mu, sigma = 0, 0.5
        x = np.linspace(0.01, 5, 1000)
        y = stats.lognorm.pdf(x, s=sigma, scale=np.exp(mu))
        ax.plot(x, y, linewidth=3, color='brown')
        ax.fill_between(x, y, alpha=0.3)
        mean_ln = np.exp(mu + sigma**2/2)
        ax.axvline(mean_ln, color='red', linestyle='--', linewidth=2, label=f'Œº = {mean_ln:.2f}')
        ax.set_title(f"–õ–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", fontsize=14)
    
    elif dist_name == "–•–∏-–∫–≤–∞–¥—Ä–∞—Ç":
        df = 5
        x = np.linspace(0.01, 15, 1000)
        y = stats.chi2.pdf(x, df)
        ax.plot(x, y, linewidth=3, color='darkgreen')
        ax.fill_between(x, y, alpha=0.3)
        ax.axvline(df, color='red', linestyle='--', linewidth=2, label=f'Œº = {df}')
        ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ œá¬≤ (df = {df})", fontsize=14)
    
    elif dist_name == "–°—Ç—å—é–¥–µ–Ω—Ç–∞ (t)":
        df = 5
        x = np.linspace(-4, 4, 1000)
        y_t = stats.t.pdf(x, df)
        y_norm = stats.norm.pdf(x)
        ax.plot(x, y_t, linewidth=3, label=f"t-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (df={df})", color='darkblue')
        ax.plot(x, y_norm, linestyle='--', linewidth=2, label="N(0,1)", color='gray')
        ax.fill_between(x, y_t, alpha=0.3)
        ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –°—Ç—å—é–¥–µ–Ω—Ç–∞ (df = {df})", fontsize=14)
    
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ax.set_xlabel("x", fontsize=12)
    ax.set_ylabel("f(x) –∏–ª–∏ P(X=x)", fontsize=12)
    ax.legend(fontsize=10)
    ax.grid(True, alpha=0.3)
    fig.tight_layout()
    
    return fig

def display_distribution_info(dist_name: str):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏"""
    info = {
        "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ (–ì–∞—É—Å—Å–æ–≤–æ)": {
            "description": "–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –∫–æ–ª–æ–∫–æ–ª–æ–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è, –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –≤–æ–∫—Ä—É–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.",
            "parameters": "Œº (—Å—Ä–µ–¥–Ω–µ–µ), œÉ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)",
            "applications": [
                "üßë‚Äçü§ù‚Äçüßë –†–æ—Å—Ç –∏ –≤–µ—Å –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏",
                "üî¨ –û—à–∏–±–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π",
                "üß† IQ-—Ç–µ—Å—Ç—ã –∏ –ø—Å–∏—Ö–æ–º–µ—Ç—Ä–∏—è",
                "üíπ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏",
                "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"
            ],
            "formula": "f(x) = (1/œÉ‚àö2œÄ) √ó e^(-(x-Œº)¬≤/2œÉ¬≤)"
        },
        "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ": {
            "description": "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è.",
            "parameters": "a (–º–∏–Ω–∏–º—É–º), b (–º–∞–∫—Å–∏–º—É–º)",
            "applications": [
                "üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª",
                "üöå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
                "üéØ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏",
                "üî¢ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
            ],
            "formula": "f(x) = 1/(b-a) –¥–ª—è a ‚â§ x ‚â§ b"
        },
        "–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–µ": {
            "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—Ö–æ–≤ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —á–∏—Å–ª–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—Ö–∞.",
            "parameters": "n (—á–∏—Å–ª–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π), p (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞)",
            "applications": [
                "üß™ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "üè≠ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
                "üìä –°–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø—Ä–æ—Å—ã",
                "üéØ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è",
                "üó≥Ô∏è –ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"
            ],
            "formula": "P(X=k) = C(n,k) √ó p^k √ó (1-p)^(n-k)"
        },
        "–ü—É–∞—Å—Å–æ–Ω–∞": {
            "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π, –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏—Ö –∑–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏.",
            "parameters": "Œª (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å/—Å—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π)",
            "applications": [
                "üìû –ó–≤–æ–Ω–∫–∏ –≤ call-—Ü–µ–Ω—Ç—Ä",
                "üöó –î–æ—Ä–æ–∂–Ω–æ-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è",
                "üè≠ –î–µ—Ñ–µ–∫—Ç—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ",
                "üåü –†–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞—Å–ø–∞–¥",
                "üìß –ü–æ—Ç–æ–∫ email-—Å–æ–æ–±—â–µ–Ω–∏–π"
            ],
            "formula": "P(X=k) = (Œª^k √ó e^(-Œª))/k!"
        },
        "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ": {
            "description": "–í—Ä–µ–º—è –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ü—É–∞—Å—Å–æ–Ω–∞; —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.",
            "parameters": "Œª (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π)",
            "applications": [
                "‚öôÔ∏è –í—Ä–µ–º—è –¥–æ –ø–æ–ª–æ–º–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                "üè™ –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
                "‚òéÔ∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤",
                "üîã –í—Ä–µ–º—è —Ä–∞–∑—Ä—è–¥–∫–∏ –±–∞—Ç–∞—Ä–µ–∏",
                "üåßÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –æ—Å–∞–¥–∫–∞–º–∏"
            ],
            "formula": "f(t) = Œª √ó e^(-Œªt) –¥–ª—è t ‚â• 0"
        },
        "–õ–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ": {
            "description": "–ï—Å–ª–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º —Å–ª—É—á–∞–π–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã –∏–º–µ–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Ç–æ —Å–∞–º–∞ –≤–µ–ª–∏—á–∏–Ω–∞ –∏–º–µ–µ—Ç –ª–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ.",
            "parameters": "Œº, œÉ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∞—Ä–∏—Ñ–º–∞)",
            "applications": [
                "üí∞ –î–æ—Ö–æ–¥—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è",
                "üìÅ –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤",
                "‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á",
                "üíπ –¶–µ–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏",
                "üè† –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
            ],
            "formula": "f(x) = (1/xœÉ‚àö2œÄ) √ó e^(-(ln(x)-Œº)¬≤/2œÉ¬≤)"
        },
        "–•–∏-–∫–≤–∞–¥—Ä–∞—Ç": {
            "description": "–°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω.",
            "parameters": "k (—Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã)",
            "applications": [
                "üß™ –ö—Ä–∏—Ç–µ—Ä–∏–π —Å–æ–≥–ª–∞—Å–∏—è",
                "üìä –û—Ü–µ–Ω–∫–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–∏",
                "üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑",
                "üìà –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏"
            ],
            "formula": "f(x) = (1/2^(k/2)Œì(k/2)) √ó x^(k/2-1) √ó e^(-x/2)"
        },
        "–°—Ç—å—é–¥–µ–Ω—Ç–∞ (t)": {
            "description": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∏ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö.",
            "parameters": "ŒΩ (—Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã)",
            "applications": [
                "üìä t-—Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö",
                "üîç –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã",
                "üß™ –ê–Ω–∞–ª–∏–∑ –º–∞–ª—ã—Ö –≤—ã–±–æ—Ä–æ–∫",
                "üìà –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
            ],
            "formula": "f(t) = Œì((ŒΩ+1)/2)/(‚àöŒΩœÄ Œì(ŒΩ/2)) √ó (1+t¬≤/ŒΩ)^(-(ŒΩ+1)/2)"
        }
    }
    
    if dist_name in info:
        dist_info = info[dist_name]
        st.markdown(f"### {dist_name}")
        
        st.markdown(f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:**")
        st.write(dist_info['description'])
        
        st.markdown(f"**‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:** {dist_info['parameters']}")
        
        if 'formula' in dist_info:
            st.markdown("**üßÆ –§–æ—Ä–º—É–ª–∞:**")
            st.code(dist_info['formula'])
        
        st.markdown("**üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**")
        for app in dist_info['applications']:
            st.write(f"‚Ä¢ {app}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if dist_name == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ (–ì–∞—É—Å—Å–æ–≤–æ)":
            st.markdown("""
            **üîë –ö–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:**
            ‚Ä¢ –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
            ‚Ä¢ 68-95-99.7 –ø—Ä–∞–≤–∏–ª–æ (–∑–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º)
            ‚Ä¢ –û—Å–Ω–æ–≤–∞ –¥–ª—è –¶–ü–¢ –∏ –º–Ω–æ–≥–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
            """)
        elif dist_name == "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ":
            st.markdown("""
            **üîë –ö–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:**
            ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∞–º—è—Ç–∏ (memoryless property)
            ‚Ä¢ –¢—è–∂–µ–ª—ã–π –ø—Ä–∞–≤—ã–π —Ö–≤–æ—Å—Ç
            ‚Ä¢ –°–≤—è–∑–∞–Ω–æ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ü—É–∞—Å—Å–æ–Ω–∞
            """)

def setup_footer():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–≤–∞–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    try:
        plt.close('all')
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(e)}")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if "page_views" not in st.session_state:
        st.session_state.page_views = 0
    st.session_state.page_views += 1
    
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
        st.markdown("""
        - [Khan Academy: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞](https://www.khanacademy.org/math/statistics-probability)
        - [StatQuest YouTube](https://www.youtube.com/c/joshstarmer)
        - [Seeing Theory](https://seeing-theory.brown.edu/)
        - [Stattrek Calculators](https://stattrek.com/online-calculator)
        - [Coursera: Statistics Courses](https://www.coursera.org/courses?query=statistics)
        """)
    
    with col2:
        st.markdown("### ‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
        st.markdown("""
        **–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.**
        
        üéØ **–¶–µ–ª—å:** –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–Ω—è—Ç–Ω–æ–π –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        
        üîß **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:** Python, Streamlit, NumPy, Matplotlib, SciPy
        
        üìß **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        """)
    
    with col3:
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        st.metric("–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ—Å—Å–∏–∏", st.session_state.page_views)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∏–∑—É—á–µ–Ω–Ω—ã–º –≤–∫–ª–∞–¥–∫–∞–º
        if "visited_tabs" not in st.session_state:
            st.session_state.visited_tabs = set()
        
        visited_count = len(st.session_state.visited_tabs)
        total_tabs = 8
        progress = visited_count / total_tabs
        
        st.metric("–ò–∑—É—á–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤", f"{visited_count}/{total_tabs}")
        st.progress(progress)
        
        # –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        with st.expander("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"):
            feedback_type = st.selectbox("–¢–∏–ø –æ—Ç–∑—ã–≤–∞:", 
                                       ["üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", "üëç –ü–æ—Ö–≤–∞–ª–∏—Ç—å", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"])
            feedback = st.text_area("–í–∞—à –æ—Ç–∑—ã–≤:")
            
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤") and feedback:
                st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞ –≤ –ë–î –∏–ª–∏ email
    
    # –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    with st.expander("üìÖ –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"):
        st.markdown("""
        **v3.0 (–î–µ–∫–∞–±—Ä—å 2025) - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è**
        - ‚ö° –ü–æ–ª–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
        - üöÄ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ 3-5 —Ä–∞–∑)
        - üèóÔ∏è –£–ª—É—á—à–µ–Ω–∞ –º–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è
        - üéì –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –∑–Ω–∞–Ω–∏–π —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—Ü–µ–Ω–∫–∏
        - üìä –†–∞—Å—à–∏—Ä–µ–Ω —Ä–∞–∑–¥–µ–ª —Ç–∏–ø–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è–º–∏
        - üé® –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —É–ª—É—á—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        - üîß –î–æ–±–∞–≤–ª–µ–Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        
        **v2.0 (–ò—é–Ω—å 2025)**
        - üìà –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π, –†–µ–≥—Ä–µ—Å—Å–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É
        - üõ°Ô∏è –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        
        **v1.0 (–ê–ø—Ä–µ–ª—å 2025)**
        - üéâ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ —Å –±–∞–∑–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
        - üìä –ë–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏: –ó–∞–∫–æ–Ω —Ç—Ä—ë—Ö —Å–∏–≥–º, –¶–ü–¢, –ó–ë–ß, –ú–∞–ª—ã–µ –≤—ã–±–æ—Ä–∫–∏
        """)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666666; font-size: 12px;'>
    üí° –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π | üî¨ –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ | 
    üéØ –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    </div>
    """, unsafe_allow_html=True)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()
